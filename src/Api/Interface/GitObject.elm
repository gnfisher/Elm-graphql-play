-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Interface.GitObject exposing (Fragments, abbreviatedOid, commitResourcePath, commitUrl, fragments, id, maybeFragments, oid, repository)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onBlob : SelectionSet decodesTo Api.Object.Blob
    , onCommit : SelectionSet decodesTo Api.Object.Commit
    , onTag : SelectionSet decodesTo Api.Object.Tag
    , onTree : SelectionSet decodesTo Api.Object.Tree
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Api.Interface.GitObject
fragments selections =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Blob" selections.onBlob
        , Object.buildFragment "Commit" selections.onCommit
        , Object.buildFragment "Tag" selections.onTag
        , Object.buildFragment "Tree" selections.onTree
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onBlob = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onCommit = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onTag = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onTree = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| An abbreviated version of the Git object ID
-}
abbreviatedOid : SelectionSet String Api.Interface.GitObject
abbreviatedOid =
    Object.selectionForField "String" "abbreviatedOid" [] Decode.string


{-| The HTTP path for this Git object
-}
commitResourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Interface.GitObject
commitResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "commitResourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for this Git object
-}
commitUrl : SelectionSet Api.ScalarCodecs.Uri Api.Interface.GitObject
commitUrl =
    Object.selectionForField "ScalarCodecs.Uri" "commitUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


id : SelectionSet Api.ScalarCodecs.Id Api.Interface.GitObject
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The Git object ID
-}
oid : SelectionSet Api.ScalarCodecs.GitObjectID Api.Interface.GitObject
oid =
    Object.selectionForField "ScalarCodecs.GitObjectID" "oid" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecGitObjectID |> .decoder)


{-| The Repository the Git object belongs to
-}
repository : SelectionSet decodesTo Api.Object.Repository -> SelectionSet decodesTo Api.Interface.GitObject
repository object_ =
    Object.selectionForCompositeField "repository" [] object_ identity
