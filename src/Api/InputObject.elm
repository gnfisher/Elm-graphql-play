-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (AcceptEnterpriseAdministratorInvitationInput, AcceptEnterpriseAdministratorInvitationInputOptionalFields, AcceptEnterpriseAdministratorInvitationInputRequiredFields, AcceptTopicSuggestionInput, AcceptTopicSuggestionInputOptionalFields, AcceptTopicSuggestionInputRequiredFields, AddAssigneesToAssignableInput, AddAssigneesToAssignableInputOptionalFields, AddAssigneesToAssignableInputRequiredFields, AddCommentInput, AddCommentInputOptionalFields, AddCommentInputRequiredFields, AddLabelsToLabelableInput, AddLabelsToLabelableInputOptionalFields, AddLabelsToLabelableInputRequiredFields, AddProjectCardInput, AddProjectCardInputOptionalFields, AddProjectCardInputRequiredFields, AddProjectColumnInput, AddProjectColumnInputOptionalFields, AddProjectColumnInputRequiredFields, AddPullRequestReviewCommentInput, AddPullRequestReviewCommentInputOptionalFields, AddPullRequestReviewCommentInputRequiredFields, AddPullRequestReviewInput, AddPullRequestReviewInputOptionalFields, AddPullRequestReviewInputRequiredFields, AddReactionInput, AddReactionInputOptionalFields, AddReactionInputRequiredFields, AddStarInput, AddStarInputOptionalFields, AddStarInputRequiredFields, ArchiveRepositoryInput, ArchiveRepositoryInputOptionalFields, ArchiveRepositoryInputRequiredFields, AuditLogOrder, AuditLogOrderOptionalFields, CancelEnterpriseAdminInvitationInput, CancelEnterpriseAdminInvitationInputOptionalFields, CancelEnterpriseAdminInvitationInputRequiredFields, ChangeUserStatusInput, ChangeUserStatusInputOptionalFields, ClearLabelsFromLabelableInput, ClearLabelsFromLabelableInputOptionalFields, ClearLabelsFromLabelableInputRequiredFields, CloneProjectInput, CloneProjectInputOptionalFields, CloneProjectInputRequiredFields, CloneTemplateRepositoryInput, CloneTemplateRepositoryInputOptionalFields, CloneTemplateRepositoryInputRequiredFields, CloseIssueInput, CloseIssueInputOptionalFields, CloseIssueInputRequiredFields, ClosePullRequestInput, ClosePullRequestInputOptionalFields, ClosePullRequestInputRequiredFields, CommitAuthor, CommitAuthorOptionalFields, CommitContributionOrder, CommitContributionOrderRequiredFields, ContributionOrder, ContributionOrderOptionalFields, ContributionOrderRequiredFields, ConvertProjectCardNoteToIssueInput, ConvertProjectCardNoteToIssueInputOptionalFields, ConvertProjectCardNoteToIssueInputRequiredFields, CreateBranchProtectionRuleInput, CreateBranchProtectionRuleInputOptionalFields, CreateBranchProtectionRuleInputRequiredFields, CreateEnterpriseOrganizationInput, CreateEnterpriseOrganizationInputOptionalFields, CreateEnterpriseOrganizationInputRequiredFields, CreateIssueInput, CreateIssueInputOptionalFields, CreateIssueInputRequiredFields, CreateProjectInput, CreateProjectInputOptionalFields, CreateProjectInputRequiredFields, CreatePullRequestInput, CreatePullRequestInputOptionalFields, CreatePullRequestInputRequiredFields, CreateRefInput, CreateRefInputOptionalFields, CreateRefInputRequiredFields, CreateRepositoryInput, CreateRepositoryInputOptionalFields, CreateRepositoryInputRequiredFields, CreateTeamDiscussionCommentInput, CreateTeamDiscussionCommentInputOptionalFields, CreateTeamDiscussionCommentInputRequiredFields, CreateTeamDiscussionInput, CreateTeamDiscussionInputOptionalFields, CreateTeamDiscussionInputRequiredFields, DeclineTopicSuggestionInput, DeclineTopicSuggestionInputOptionalFields, DeclineTopicSuggestionInputRequiredFields, DeleteBranchProtectionRuleInput, DeleteBranchProtectionRuleInputOptionalFields, DeleteBranchProtectionRuleInputRequiredFields, DeleteDeploymentInput, DeleteDeploymentInputOptionalFields, DeleteDeploymentInputRequiredFields, DeleteIssueCommentInput, DeleteIssueCommentInputOptionalFields, DeleteIssueCommentInputRequiredFields, DeleteIssueInput, DeleteIssueInputOptionalFields, DeleteIssueInputRequiredFields, DeleteProjectCardInput, DeleteProjectCardInputOptionalFields, DeleteProjectCardInputRequiredFields, DeleteProjectColumnInput, DeleteProjectColumnInputOptionalFields, DeleteProjectColumnInputRequiredFields, DeleteProjectInput, DeleteProjectInputOptionalFields, DeleteProjectInputRequiredFields, DeletePullRequestReviewCommentInput, DeletePullRequestReviewCommentInputOptionalFields, DeletePullRequestReviewCommentInputRequiredFields, DeletePullRequestReviewInput, DeletePullRequestReviewInputOptionalFields, DeletePullRequestReviewInputRequiredFields, DeleteRefInput, DeleteRefInputOptionalFields, DeleteRefInputRequiredFields, DeleteTeamDiscussionCommentInput, DeleteTeamDiscussionCommentInputOptionalFields, DeleteTeamDiscussionCommentInputRequiredFields, DeleteTeamDiscussionInput, DeleteTeamDiscussionInputOptionalFields, DeleteTeamDiscussionInputRequiredFields, DeploymentOrder, DeploymentOrderRequiredFields, DismissPullRequestReviewInput, DismissPullRequestReviewInputOptionalFields, DismissPullRequestReviewInputRequiredFields, DraftPullRequestReviewComment, DraftPullRequestReviewCommentRequiredFields, EnterpriseAdministratorInvitationOrder, EnterpriseAdministratorInvitationOrderRequiredFields, EnterpriseMemberOrder, EnterpriseMemberOrderRequiredFields, EnterpriseServerInstallationOrder, EnterpriseServerInstallationOrderRequiredFields, EnterpriseServerUserAccountEmailOrder, EnterpriseServerUserAccountEmailOrderRequiredFields, EnterpriseServerUserAccountOrder, EnterpriseServerUserAccountOrderRequiredFields, EnterpriseServerUserAccountsUploadOrder, EnterpriseServerUserAccountsUploadOrderRequiredFields, FollowUserInput, FollowUserInputOptionalFields, FollowUserInputRequiredFields, GistOrder, GistOrderRequiredFields, InviteEnterpriseAdminInput, InviteEnterpriseAdminInputOptionalFields, InviteEnterpriseAdminInputRequiredFields, IssueFilters, IssueFiltersOptionalFields, IssueOrder, IssueOrderRequiredFields, LabelOrder, LabelOrderRequiredFields, LanguageOrder, LanguageOrderRequiredFields, LinkRepositoryToProjectInput, LinkRepositoryToProjectInputOptionalFields, LinkRepositoryToProjectInputRequiredFields, LockLockableInput, LockLockableInputOptionalFields, LockLockableInputRequiredFields, MergeBranchInput, MergeBranchInputOptionalFields, MergeBranchInputRequiredFields, MergePullRequestInput, MergePullRequestInputOptionalFields, MergePullRequestInputRequiredFields, MilestoneOrder, MilestoneOrderRequiredFields, MoveProjectCardInput, MoveProjectCardInputOptionalFields, MoveProjectCardInputRequiredFields, MoveProjectColumnInput, MoveProjectColumnInputOptionalFields, MoveProjectColumnInputRequiredFields, OrganizationOrder, OrganizationOrderRequiredFields, ProjectOrder, ProjectOrderRequiredFields, PullRequestOrder, PullRequestOrderRequiredFields, ReactionOrder, ReactionOrderRequiredFields, RefOrder, RefOrderRequiredFields, RegenerateEnterpriseIdentityProviderRecoveryCodesInput, RegenerateEnterpriseIdentityProviderRecoveryCodesInputOptionalFields, RegenerateEnterpriseIdentityProviderRecoveryCodesInputRequiredFields, RegistryPackageMetadatum, RegistryPackageMetadatumOptionalFields, RegistryPackageMetadatumRequiredFields, ReleaseOrder, ReleaseOrderRequiredFields, RemoveAssigneesFromAssignableInput, RemoveAssigneesFromAssignableInputOptionalFields, RemoveAssigneesFromAssignableInputRequiredFields, RemoveEnterpriseAdminInput, RemoveEnterpriseAdminInputOptionalFields, RemoveEnterpriseAdminInputRequiredFields, RemoveEnterpriseOrganizationInput, RemoveEnterpriseOrganizationInputOptionalFields, RemoveEnterpriseOrganizationInputRequiredFields, RemoveLabelsFromLabelableInput, RemoveLabelsFromLabelableInputOptionalFields, RemoveLabelsFromLabelableInputRequiredFields, RemoveOutsideCollaboratorInput, RemoveOutsideCollaboratorInputOptionalFields, RemoveOutsideCollaboratorInputRequiredFields, RemoveReactionInput, RemoveReactionInputOptionalFields, RemoveReactionInputRequiredFields, RemoveStarInput, RemoveStarInputOptionalFields, RemoveStarInputRequiredFields, ReopenIssueInput, ReopenIssueInputOptionalFields, ReopenIssueInputRequiredFields, ReopenPullRequestInput, ReopenPullRequestInputOptionalFields, ReopenPullRequestInputRequiredFields, RepositoryInvitationOrder, RepositoryInvitationOrderRequiredFields, RepositoryOrder, RepositoryOrderRequiredFields, RequestReviewsInput, RequestReviewsInputOptionalFields, RequestReviewsInputRequiredFields, ResolveReviewThreadInput, ResolveReviewThreadInputOptionalFields, ResolveReviewThreadInputRequiredFields, SavedReplyOrder, SavedReplyOrderRequiredFields, SecurityAdvisoryIdentifierFilter, SecurityAdvisoryIdentifierFilterRequiredFields, SecurityAdvisoryOrder, SecurityAdvisoryOrderRequiredFields, SecurityVulnerabilityOrder, SecurityVulnerabilityOrderRequiredFields, SponsorsTierOrder, SponsorsTierOrderRequiredFields, SponsorshipOrder, SponsorshipOrderRequiredFields, StarOrder, StarOrderRequiredFields, SubmitPullRequestReviewInput, SubmitPullRequestReviewInputOptionalFields, SubmitPullRequestReviewInputRequiredFields, TeamDiscussionCommentOrder, TeamDiscussionCommentOrderRequiredFields, TeamDiscussionOrder, TeamDiscussionOrderRequiredFields, TeamMemberOrder, TeamMemberOrderRequiredFields, TeamOrder, TeamOrderRequiredFields, TeamRepositoryOrder, TeamRepositoryOrderRequiredFields, TransferIssueInput, TransferIssueInputOptionalFields, TransferIssueInputRequiredFields, UnarchiveRepositoryInput, UnarchiveRepositoryInputOptionalFields, UnarchiveRepositoryInputRequiredFields, UnfollowUserInput, UnfollowUserInputOptionalFields, UnfollowUserInputRequiredFields, UnlinkRepositoryFromProjectInput, UnlinkRepositoryFromProjectInputOptionalFields, UnlinkRepositoryFromProjectInputRequiredFields, UnlockLockableInput, UnlockLockableInputOptionalFields, UnlockLockableInputRequiredFields, UnmarkIssueAsDuplicateInput, UnmarkIssueAsDuplicateInputOptionalFields, UnmarkIssueAsDuplicateInputRequiredFields, UnresolveReviewThreadInput, UnresolveReviewThreadInputOptionalFields, UnresolveReviewThreadInputRequiredFields, UpdateBranchProtectionRuleInput, UpdateBranchProtectionRuleInputOptionalFields, UpdateBranchProtectionRuleInputRequiredFields, UpdateEnterpriseActionExecutionCapabilitySettingInput, UpdateEnterpriseActionExecutionCapabilitySettingInputOptionalFields, UpdateEnterpriseActionExecutionCapabilitySettingInputRequiredFields, UpdateEnterpriseAdministratorRoleInput, UpdateEnterpriseAdministratorRoleInputOptionalFields, UpdateEnterpriseAdministratorRoleInputRequiredFields, UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput, UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputOptionalFields, UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputRequiredFields, UpdateEnterpriseDefaultRepositoryPermissionSettingInput, UpdateEnterpriseDefaultRepositoryPermissionSettingInputOptionalFields, UpdateEnterpriseDefaultRepositoryPermissionSettingInputRequiredFields, UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput, UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputOptionalFields, UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputRequiredFields, UpdateEnterpriseMembersCanCreateRepositoriesSettingInput, UpdateEnterpriseMembersCanCreateRepositoriesSettingInputOptionalFields, UpdateEnterpriseMembersCanCreateRepositoriesSettingInputRequiredFields, UpdateEnterpriseMembersCanDeleteIssuesSettingInput, UpdateEnterpriseMembersCanDeleteIssuesSettingInputOptionalFields, UpdateEnterpriseMembersCanDeleteIssuesSettingInputRequiredFields, UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput, UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputOptionalFields, UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputRequiredFields, UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput, UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputOptionalFields, UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputRequiredFields, UpdateEnterpriseMembersCanMakePurchasesSettingInput, UpdateEnterpriseMembersCanMakePurchasesSettingInputOptionalFields, UpdateEnterpriseMembersCanMakePurchasesSettingInputRequiredFields, UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput, UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputOptionalFields, UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputRequiredFields, UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput, UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputOptionalFields, UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputRequiredFields, UpdateEnterpriseOrganizationProjectsSettingInput, UpdateEnterpriseOrganizationProjectsSettingInputOptionalFields, UpdateEnterpriseOrganizationProjectsSettingInputRequiredFields, UpdateEnterpriseProfileInput, UpdateEnterpriseProfileInputOptionalFields, UpdateEnterpriseProfileInputRequiredFields, UpdateEnterpriseRepositoryProjectsSettingInput, UpdateEnterpriseRepositoryProjectsSettingInputOptionalFields, UpdateEnterpriseRepositoryProjectsSettingInputRequiredFields, UpdateEnterpriseTeamDiscussionsSettingInput, UpdateEnterpriseTeamDiscussionsSettingInputOptionalFields, UpdateEnterpriseTeamDiscussionsSettingInputRequiredFields, UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput, UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputOptionalFields, UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputRequiredFields, UpdateIssueCommentInput, UpdateIssueCommentInputOptionalFields, UpdateIssueCommentInputRequiredFields, UpdateIssueInput, UpdateIssueInputOptionalFields, UpdateIssueInputRequiredFields, UpdateProjectCardInput, UpdateProjectCardInputOptionalFields, UpdateProjectCardInputRequiredFields, UpdateProjectColumnInput, UpdateProjectColumnInputOptionalFields, UpdateProjectColumnInputRequiredFields, UpdateProjectInput, UpdateProjectInputOptionalFields, UpdateProjectInputRequiredFields, UpdatePullRequestInput, UpdatePullRequestInputOptionalFields, UpdatePullRequestInputRequiredFields, UpdatePullRequestReviewCommentInput, UpdatePullRequestReviewCommentInputOptionalFields, UpdatePullRequestReviewCommentInputRequiredFields, UpdatePullRequestReviewInput, UpdatePullRequestReviewInputOptionalFields, UpdatePullRequestReviewInputRequiredFields, UpdateRefInput, UpdateRefInputOptionalFields, UpdateRefInputRequiredFields, UpdateRepositoryInput, UpdateRepositoryInputOptionalFields, UpdateRepositoryInputRequiredFields, UpdateSubscriptionInput, UpdateSubscriptionInputOptionalFields, UpdateSubscriptionInputRequiredFields, UpdateTeamDiscussionCommentInput, UpdateTeamDiscussionCommentInputOptionalFields, UpdateTeamDiscussionCommentInputRequiredFields, UpdateTeamDiscussionInput, UpdateTeamDiscussionInputOptionalFields, UpdateTeamDiscussionInputRequiredFields, UpdateTopicsInput, UpdateTopicsInputOptionalFields, UpdateTopicsInputRequiredFields, UserStatusOrder, UserStatusOrderRequiredFields, buildAcceptEnterpriseAdministratorInvitationInput, buildAcceptTopicSuggestionInput, buildAddAssigneesToAssignableInput, buildAddCommentInput, buildAddLabelsToLabelableInput, buildAddProjectCardInput, buildAddProjectColumnInput, buildAddPullRequestReviewCommentInput, buildAddPullRequestReviewInput, buildAddReactionInput, buildAddStarInput, buildArchiveRepositoryInput, buildAuditLogOrder, buildCancelEnterpriseAdminInvitationInput, buildChangeUserStatusInput, buildClearLabelsFromLabelableInput, buildCloneProjectInput, buildCloneTemplateRepositoryInput, buildCloseIssueInput, buildClosePullRequestInput, buildCommitAuthor, buildCommitContributionOrder, buildContributionOrder, buildConvertProjectCardNoteToIssueInput, buildCreateBranchProtectionRuleInput, buildCreateEnterpriseOrganizationInput, buildCreateIssueInput, buildCreateProjectInput, buildCreatePullRequestInput, buildCreateRefInput, buildCreateRepositoryInput, buildCreateTeamDiscussionCommentInput, buildCreateTeamDiscussionInput, buildDeclineTopicSuggestionInput, buildDeleteBranchProtectionRuleInput, buildDeleteDeploymentInput, buildDeleteIssueCommentInput, buildDeleteIssueInput, buildDeleteProjectCardInput, buildDeleteProjectColumnInput, buildDeleteProjectInput, buildDeletePullRequestReviewCommentInput, buildDeletePullRequestReviewInput, buildDeleteRefInput, buildDeleteTeamDiscussionCommentInput, buildDeleteTeamDiscussionInput, buildDeploymentOrder, buildDismissPullRequestReviewInput, buildDraftPullRequestReviewComment, buildEnterpriseAdministratorInvitationOrder, buildEnterpriseMemberOrder, buildEnterpriseServerInstallationOrder, buildEnterpriseServerUserAccountEmailOrder, buildEnterpriseServerUserAccountOrder, buildEnterpriseServerUserAccountsUploadOrder, buildFollowUserInput, buildGistOrder, buildInviteEnterpriseAdminInput, buildIssueFilters, buildIssueOrder, buildLabelOrder, buildLanguageOrder, buildLinkRepositoryToProjectInput, buildLockLockableInput, buildMergeBranchInput, buildMergePullRequestInput, buildMilestoneOrder, buildMoveProjectCardInput, buildMoveProjectColumnInput, buildOrganizationOrder, buildProjectOrder, buildPullRequestOrder, buildReactionOrder, buildRefOrder, buildRegenerateEnterpriseIdentityProviderRecoveryCodesInput, buildRegistryPackageMetadatum, buildReleaseOrder, buildRemoveAssigneesFromAssignableInput, buildRemoveEnterpriseAdminInput, buildRemoveEnterpriseOrganizationInput, buildRemoveLabelsFromLabelableInput, buildRemoveOutsideCollaboratorInput, buildRemoveReactionInput, buildRemoveStarInput, buildReopenIssueInput, buildReopenPullRequestInput, buildRepositoryInvitationOrder, buildRepositoryOrder, buildRequestReviewsInput, buildResolveReviewThreadInput, buildSavedReplyOrder, buildSecurityAdvisoryIdentifierFilter, buildSecurityAdvisoryOrder, buildSecurityVulnerabilityOrder, buildSponsorsTierOrder, buildSponsorshipOrder, buildStarOrder, buildSubmitPullRequestReviewInput, buildTeamDiscussionCommentOrder, buildTeamDiscussionOrder, buildTeamMemberOrder, buildTeamOrder, buildTeamRepositoryOrder, buildTransferIssueInput, buildUnarchiveRepositoryInput, buildUnfollowUserInput, buildUnlinkRepositoryFromProjectInput, buildUnlockLockableInput, buildUnmarkIssueAsDuplicateInput, buildUnresolveReviewThreadInput, buildUpdateBranchProtectionRuleInput, buildUpdateEnterpriseActionExecutionCapabilitySettingInput, buildUpdateEnterpriseAdministratorRoleInput, buildUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput, buildUpdateEnterpriseDefaultRepositoryPermissionSettingInput, buildUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput, buildUpdateEnterpriseMembersCanCreateRepositoriesSettingInput, buildUpdateEnterpriseMembersCanDeleteIssuesSettingInput, buildUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput, buildUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput, buildUpdateEnterpriseMembersCanMakePurchasesSettingInput, buildUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput, buildUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput, buildUpdateEnterpriseOrganizationProjectsSettingInput, buildUpdateEnterpriseProfileInput, buildUpdateEnterpriseRepositoryProjectsSettingInput, buildUpdateEnterpriseTeamDiscussionsSettingInput, buildUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput, buildUpdateIssueCommentInput, buildUpdateIssueInput, buildUpdateProjectCardInput, buildUpdateProjectColumnInput, buildUpdateProjectInput, buildUpdatePullRequestInput, buildUpdatePullRequestReviewCommentInput, buildUpdatePullRequestReviewInput, buildUpdateRefInput, buildUpdateRepositoryInput, buildUpdateSubscriptionInput, buildUpdateTeamDiscussionCommentInput, buildUpdateTeamDiscussionInput, buildUpdateTopicsInput, buildUserStatusOrder, encodeAcceptEnterpriseAdministratorInvitationInput, encodeAcceptTopicSuggestionInput, encodeAddAssigneesToAssignableInput, encodeAddCommentInput, encodeAddLabelsToLabelableInput, encodeAddProjectCardInput, encodeAddProjectColumnInput, encodeAddPullRequestReviewCommentInput, encodeAddPullRequestReviewInput, encodeAddReactionInput, encodeAddStarInput, encodeArchiveRepositoryInput, encodeAuditLogOrder, encodeCancelEnterpriseAdminInvitationInput, encodeChangeUserStatusInput, encodeClearLabelsFromLabelableInput, encodeCloneProjectInput, encodeCloneTemplateRepositoryInput, encodeCloseIssueInput, encodeClosePullRequestInput, encodeCommitAuthor, encodeCommitContributionOrder, encodeContributionOrder, encodeConvertProjectCardNoteToIssueInput, encodeCreateBranchProtectionRuleInput, encodeCreateEnterpriseOrganizationInput, encodeCreateIssueInput, encodeCreateProjectInput, encodeCreatePullRequestInput, encodeCreateRefInput, encodeCreateRepositoryInput, encodeCreateTeamDiscussionCommentInput, encodeCreateTeamDiscussionInput, encodeDeclineTopicSuggestionInput, encodeDeleteBranchProtectionRuleInput, encodeDeleteDeploymentInput, encodeDeleteIssueCommentInput, encodeDeleteIssueInput, encodeDeleteProjectCardInput, encodeDeleteProjectColumnInput, encodeDeleteProjectInput, encodeDeletePullRequestReviewCommentInput, encodeDeletePullRequestReviewInput, encodeDeleteRefInput, encodeDeleteTeamDiscussionCommentInput, encodeDeleteTeamDiscussionInput, encodeDeploymentOrder, encodeDismissPullRequestReviewInput, encodeDraftPullRequestReviewComment, encodeEnterpriseAdministratorInvitationOrder, encodeEnterpriseMemberOrder, encodeEnterpriseServerInstallationOrder, encodeEnterpriseServerUserAccountEmailOrder, encodeEnterpriseServerUserAccountOrder, encodeEnterpriseServerUserAccountsUploadOrder, encodeFollowUserInput, encodeGistOrder, encodeInviteEnterpriseAdminInput, encodeIssueFilters, encodeIssueOrder, encodeLabelOrder, encodeLanguageOrder, encodeLinkRepositoryToProjectInput, encodeLockLockableInput, encodeMergeBranchInput, encodeMergePullRequestInput, encodeMilestoneOrder, encodeMoveProjectCardInput, encodeMoveProjectColumnInput, encodeOrganizationOrder, encodeProjectOrder, encodePullRequestOrder, encodeReactionOrder, encodeRefOrder, encodeRegenerateEnterpriseIdentityProviderRecoveryCodesInput, encodeRegistryPackageMetadatum, encodeReleaseOrder, encodeRemoveAssigneesFromAssignableInput, encodeRemoveEnterpriseAdminInput, encodeRemoveEnterpriseOrganizationInput, encodeRemoveLabelsFromLabelableInput, encodeRemoveOutsideCollaboratorInput, encodeRemoveReactionInput, encodeRemoveStarInput, encodeReopenIssueInput, encodeReopenPullRequestInput, encodeRepositoryInvitationOrder, encodeRepositoryOrder, encodeRequestReviewsInput, encodeResolveReviewThreadInput, encodeSavedReplyOrder, encodeSecurityAdvisoryIdentifierFilter, encodeSecurityAdvisoryOrder, encodeSecurityVulnerabilityOrder, encodeSponsorsTierOrder, encodeSponsorshipOrder, encodeStarOrder, encodeSubmitPullRequestReviewInput, encodeTeamDiscussionCommentOrder, encodeTeamDiscussionOrder, encodeTeamMemberOrder, encodeTeamOrder, encodeTeamRepositoryOrder, encodeTransferIssueInput, encodeUnarchiveRepositoryInput, encodeUnfollowUserInput, encodeUnlinkRepositoryFromProjectInput, encodeUnlockLockableInput, encodeUnmarkIssueAsDuplicateInput, encodeUnresolveReviewThreadInput, encodeUpdateBranchProtectionRuleInput, encodeUpdateEnterpriseActionExecutionCapabilitySettingInput, encodeUpdateEnterpriseAdministratorRoleInput, encodeUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput, encodeUpdateEnterpriseDefaultRepositoryPermissionSettingInput, encodeUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput, encodeUpdateEnterpriseMembersCanCreateRepositoriesSettingInput, encodeUpdateEnterpriseMembersCanDeleteIssuesSettingInput, encodeUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput, encodeUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput, encodeUpdateEnterpriseMembersCanMakePurchasesSettingInput, encodeUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput, encodeUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput, encodeUpdateEnterpriseOrganizationProjectsSettingInput, encodeUpdateEnterpriseProfileInput, encodeUpdateEnterpriseRepositoryProjectsSettingInput, encodeUpdateEnterpriseTeamDiscussionsSettingInput, encodeUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput, encodeUpdateIssueCommentInput, encodeUpdateIssueInput, encodeUpdateProjectCardInput, encodeUpdateProjectColumnInput, encodeUpdateProjectInput, encodeUpdatePullRequestInput, encodeUpdatePullRequestReviewCommentInput, encodeUpdatePullRequestReviewInput, encodeUpdateRefInput, encodeUpdateRepositoryInput, encodeUpdateSubscriptionInput, encodeUpdateTeamDiscussionCommentInput, encodeUpdateTeamDiscussionInput, encodeUpdateTopicsInput, encodeUserStatusOrder)

import Api.Enum.ActionExecutionCapabilitySetting
import Api.Enum.AuditLogOrderField
import Api.Enum.CommitContributionOrderField
import Api.Enum.ContributionOrderField
import Api.Enum.DeploymentOrderField
import Api.Enum.EnterpriseAdministratorInvitationOrderField
import Api.Enum.EnterpriseAdministratorRole
import Api.Enum.EnterpriseDefaultRepositoryPermissionSettingValue
import Api.Enum.EnterpriseEnabledDisabledSettingValue
import Api.Enum.EnterpriseEnabledSettingValue
import Api.Enum.EnterpriseMemberOrderField
import Api.Enum.EnterpriseMembersCanCreateRepositoriesSettingValue
import Api.Enum.EnterpriseMembersCanMakePurchasesSettingValue
import Api.Enum.EnterpriseServerInstallationOrderField
import Api.Enum.EnterpriseServerUserAccountEmailOrderField
import Api.Enum.EnterpriseServerUserAccountOrderField
import Api.Enum.EnterpriseServerUserAccountsUploadOrderField
import Api.Enum.GistOrderField
import Api.Enum.IssueOrderField
import Api.Enum.IssueState
import Api.Enum.LabelOrderField
import Api.Enum.LanguageOrderField
import Api.Enum.LockReason
import Api.Enum.MilestoneOrderField
import Api.Enum.OrderDirection
import Api.Enum.OrganizationOrderField
import Api.Enum.ProjectOrderField
import Api.Enum.ProjectState
import Api.Enum.ProjectTemplate
import Api.Enum.PullRequestMergeMethod
import Api.Enum.PullRequestOrderField
import Api.Enum.PullRequestReviewEvent
import Api.Enum.PullRequestUpdateState
import Api.Enum.ReactionContent
import Api.Enum.ReactionOrderField
import Api.Enum.RefOrderField
import Api.Enum.ReleaseOrderField
import Api.Enum.RepositoryInvitationOrderField
import Api.Enum.RepositoryOrderField
import Api.Enum.RepositoryVisibility
import Api.Enum.SavedReplyOrderField
import Api.Enum.SecurityAdvisoryIdentifierType
import Api.Enum.SecurityAdvisoryOrderField
import Api.Enum.SecurityVulnerabilityOrderField
import Api.Enum.SponsorsTierOrderField
import Api.Enum.SponsorshipOrderField
import Api.Enum.StarOrderField
import Api.Enum.SubscriptionState
import Api.Enum.TeamDiscussionCommentOrderField
import Api.Enum.TeamDiscussionOrderField
import Api.Enum.TeamMemberOrderField
import Api.Enum.TeamOrderField
import Api.Enum.TeamRepositoryOrderField
import Api.Enum.TopicSuggestionDeclineReason
import Api.Enum.UserStatusOrderField
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAcceptEnterpriseAdministratorInvitationInput : AcceptEnterpriseAdministratorInvitationInputRequiredFields -> (AcceptEnterpriseAdministratorInvitationInputOptionalFields -> AcceptEnterpriseAdministratorInvitationInputOptionalFields) -> AcceptEnterpriseAdministratorInvitationInput
buildAcceptEnterpriseAdministratorInvitationInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { invitationId = required.invitationId, clientMutationId = optionals.clientMutationId }


type alias AcceptEnterpriseAdministratorInvitationInputRequiredFields =
    { invitationId : Api.ScalarCodecs.Id }


type alias AcceptEnterpriseAdministratorInvitationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AcceptEnterpriseAdministratorInvitationInput input object.
-}
type alias AcceptEnterpriseAdministratorInvitationInput =
    { invitationId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AcceptEnterpriseAdministratorInvitationInput into a value that can be used as an argument.
-}
encodeAcceptEnterpriseAdministratorInvitationInput : AcceptEnterpriseAdministratorInvitationInput -> Value
encodeAcceptEnterpriseAdministratorInvitationInput input =
    Encode.maybeObject
        [ ( "invitationId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.invitationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAcceptTopicSuggestionInput : AcceptTopicSuggestionInputRequiredFields -> (AcceptTopicSuggestionInputOptionalFields -> AcceptTopicSuggestionInputOptionalFields) -> AcceptTopicSuggestionInput
buildAcceptTopicSuggestionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, name = required.name, clientMutationId = optionals.clientMutationId }


type alias AcceptTopicSuggestionInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id
    , name : String
    }


type alias AcceptTopicSuggestionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AcceptTopicSuggestionInput input object.
-}
type alias AcceptTopicSuggestionInput =
    { repositoryId : Api.ScalarCodecs.Id
    , name : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AcceptTopicSuggestionInput into a value that can be used as an argument.
-}
encodeAcceptTopicSuggestionInput : AcceptTopicSuggestionInput -> Value
encodeAcceptTopicSuggestionInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "name", Encode.string input.name |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddAssigneesToAssignableInput : AddAssigneesToAssignableInputRequiredFields -> (AddAssigneesToAssignableInputOptionalFields -> AddAssigneesToAssignableInputOptionalFields) -> AddAssigneesToAssignableInput
buildAddAssigneesToAssignableInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { assignableId = required.assignableId, assigneeIds = required.assigneeIds, clientMutationId = optionals.clientMutationId }


type alias AddAssigneesToAssignableInputRequiredFields =
    { assignableId : Api.ScalarCodecs.Id
    , assigneeIds : List Api.ScalarCodecs.Id
    }


type alias AddAssigneesToAssignableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddAssigneesToAssignableInput input object.
-}
type alias AddAssigneesToAssignableInput =
    { assignableId : Api.ScalarCodecs.Id
    , assigneeIds : List Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddAssigneesToAssignableInput into a value that can be used as an argument.
-}
encodeAddAssigneesToAssignableInput : AddAssigneesToAssignableInput -> Value
encodeAddAssigneesToAssignableInput input =
    Encode.maybeObject
        [ ( "assignableId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.assignableId |> Just ), ( "assigneeIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) input.assigneeIds |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddCommentInput : AddCommentInputRequiredFields -> (AddCommentInputOptionalFields -> AddCommentInputOptionalFields) -> AddCommentInput
buildAddCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { subjectId = required.subjectId, body = required.body, clientMutationId = optionals.clientMutationId }


type alias AddCommentInputRequiredFields =
    { subjectId : Api.ScalarCodecs.Id
    , body : String
    }


type alias AddCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddCommentInput input object.
-}
type alias AddCommentInput =
    { subjectId : Api.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddCommentInput into a value that can be used as an argument.
-}
encodeAddCommentInput : AddCommentInput -> Value
encodeAddCommentInput input =
    Encode.maybeObject
        [ ( "subjectId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "body", Encode.string input.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddLabelsToLabelableInput : AddLabelsToLabelableInputRequiredFields -> (AddLabelsToLabelableInputOptionalFields -> AddLabelsToLabelableInputOptionalFields) -> AddLabelsToLabelableInput
buildAddLabelsToLabelableInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { labelableId = required.labelableId, labelIds = required.labelIds, clientMutationId = optionals.clientMutationId }


type alias AddLabelsToLabelableInputRequiredFields =
    { labelableId : Api.ScalarCodecs.Id
    , labelIds : List Api.ScalarCodecs.Id
    }


type alias AddLabelsToLabelableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddLabelsToLabelableInput input object.
-}
type alias AddLabelsToLabelableInput =
    { labelableId : Api.ScalarCodecs.Id
    , labelIds : List Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddLabelsToLabelableInput into a value that can be used as an argument.
-}
encodeAddLabelsToLabelableInput : AddLabelsToLabelableInput -> Value
encodeAddLabelsToLabelableInput input =
    Encode.maybeObject
        [ ( "labelableId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.labelableId |> Just ), ( "labelIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) input.labelIds |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddProjectCardInput : AddProjectCardInputRequiredFields -> (AddProjectCardInputOptionalFields -> AddProjectCardInputOptionalFields) -> AddProjectCardInput
buildAddProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { contentId = Absent, note = Absent, clientMutationId = Absent }
    in
    { projectColumnId = required.projectColumnId, contentId = optionals.contentId, note = optionals.note, clientMutationId = optionals.clientMutationId }


type alias AddProjectCardInputRequiredFields =
    { projectColumnId : Api.ScalarCodecs.Id }


type alias AddProjectCardInputOptionalFields =
    { contentId : OptionalArgument Api.ScalarCodecs.Id
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddProjectCardInput input object.
-}
type alias AddProjectCardInput =
    { projectColumnId : Api.ScalarCodecs.Id
    , contentId : OptionalArgument Api.ScalarCodecs.Id
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddProjectCardInput into a value that can be used as an argument.
-}
encodeAddProjectCardInput : AddProjectCardInput -> Value
encodeAddProjectCardInput input =
    Encode.maybeObject
        [ ( "projectColumnId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.projectColumnId |> Just ), ( "contentId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.contentId ), ( "note", Encode.string |> Encode.optional input.note ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddProjectColumnInput : AddProjectColumnInputRequiredFields -> (AddProjectColumnInputOptionalFields -> AddProjectColumnInputOptionalFields) -> AddProjectColumnInput
buildAddProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { projectId = required.projectId, name = required.name, clientMutationId = optionals.clientMutationId }


type alias AddProjectColumnInputRequiredFields =
    { projectId : Api.ScalarCodecs.Id
    , name : String
    }


type alias AddProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddProjectColumnInput input object.
-}
type alias AddProjectColumnInput =
    { projectId : Api.ScalarCodecs.Id
    , name : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddProjectColumnInput into a value that can be used as an argument.
-}
encodeAddProjectColumnInput : AddProjectColumnInput -> Value
encodeAddProjectColumnInput input =
    Encode.maybeObject
        [ ( "projectId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.projectId |> Just ), ( "name", Encode.string input.name |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddPullRequestReviewCommentInput : AddPullRequestReviewCommentInputRequiredFields -> (AddPullRequestReviewCommentInputOptionalFields -> AddPullRequestReviewCommentInputOptionalFields) -> AddPullRequestReviewCommentInput
buildAddPullRequestReviewCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { pullRequestId = Absent, pullRequestReviewId = Absent, commitOID = Absent, path = Absent, position = Absent, inReplyTo = Absent, clientMutationId = Absent }
    in
    { pullRequestId = optionals.pullRequestId, pullRequestReviewId = optionals.pullRequestReviewId, commitOID = optionals.commitOID, body = required.body, path = optionals.path, position = optionals.position, inReplyTo = optionals.inReplyTo, clientMutationId = optionals.clientMutationId }


type alias AddPullRequestReviewCommentInputRequiredFields =
    { body : String }


type alias AddPullRequestReviewCommentInputOptionalFields =
    { pullRequestId : OptionalArgument Api.ScalarCodecs.Id
    , pullRequestReviewId : OptionalArgument Api.ScalarCodecs.Id
    , commitOID : OptionalArgument Api.ScalarCodecs.GitObjectID
    , path : OptionalArgument String
    , position : OptionalArgument Int
    , inReplyTo : OptionalArgument Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPullRequestReviewCommentInput input object.
-}
type alias AddPullRequestReviewCommentInput =
    { pullRequestId : OptionalArgument Api.ScalarCodecs.Id
    , pullRequestReviewId : OptionalArgument Api.ScalarCodecs.Id
    , commitOID : OptionalArgument Api.ScalarCodecs.GitObjectID
    , body : String
    , path : OptionalArgument String
    , position : OptionalArgument Int
    , inReplyTo : OptionalArgument Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPullRequestReviewCommentInput into a value that can be used as an argument.
-}
encodeAddPullRequestReviewCommentInput : AddPullRequestReviewCommentInput -> Value
encodeAddPullRequestReviewCommentInput input =
    Encode.maybeObject
        [ ( "pullRequestId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.pullRequestId ), ( "pullRequestReviewId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.pullRequestReviewId ), ( "commitOID", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input.commitOID ), ( "body", Encode.string input.body |> Just ), ( "path", Encode.string |> Encode.optional input.path ), ( "position", Encode.int |> Encode.optional input.position ), ( "inReplyTo", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.inReplyTo ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddPullRequestReviewInput : AddPullRequestReviewInputRequiredFields -> (AddPullRequestReviewInputOptionalFields -> AddPullRequestReviewInputOptionalFields) -> AddPullRequestReviewInput
buildAddPullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { commitOID = Absent, body = Absent, event = Absent, comments = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required.pullRequestId, commitOID = optionals.commitOID, body = optionals.body, event = optionals.event, comments = optionals.comments, clientMutationId = optionals.clientMutationId }


type alias AddPullRequestReviewInputRequiredFields =
    { pullRequestId : Api.ScalarCodecs.Id }


type alias AddPullRequestReviewInputOptionalFields =
    { commitOID : OptionalArgument Api.ScalarCodecs.GitObjectID
    , body : OptionalArgument String
    , event : OptionalArgument Api.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , comments : OptionalArgument (List (Maybe DraftPullRequestReviewComment))
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPullRequestReviewInput input object.
-}
type alias AddPullRequestReviewInput =
    { pullRequestId : Api.ScalarCodecs.Id
    , commitOID : OptionalArgument Api.ScalarCodecs.GitObjectID
    , body : OptionalArgument String
    , event : OptionalArgument Api.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , comments : OptionalArgument (List (Maybe DraftPullRequestReviewComment))
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPullRequestReviewInput into a value that can be used as an argument.
-}
encodeAddPullRequestReviewInput : AddPullRequestReviewInput -> Value
encodeAddPullRequestReviewInput input =
    Encode.maybeObject
        [ ( "pullRequestId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.pullRequestId |> Just ), ( "commitOID", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input.commitOID ), ( "body", Encode.string |> Encode.optional input.body ), ( "event", Encode.enum Api.Enum.PullRequestReviewEvent.toString |> Encode.optional input.event ), ( "comments", (encodeDraftPullRequestReviewComment |> Encode.maybe |> Encode.list) |> Encode.optional input.comments ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddReactionInput : AddReactionInputRequiredFields -> (AddReactionInputOptionalFields -> AddReactionInputOptionalFields) -> AddReactionInput
buildAddReactionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { subjectId = required.subjectId, content = required.content, clientMutationId = optionals.clientMutationId }


type alias AddReactionInputRequiredFields =
    { subjectId : Api.ScalarCodecs.Id
    , content : Api.Enum.ReactionContent.ReactionContent
    }


type alias AddReactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddReactionInput input object.
-}
type alias AddReactionInput =
    { subjectId : Api.ScalarCodecs.Id
    , content : Api.Enum.ReactionContent.ReactionContent
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddReactionInput into a value that can be used as an argument.
-}
encodeAddReactionInput : AddReactionInput -> Value
encodeAddReactionInput input =
    Encode.maybeObject
        [ ( "subjectId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "content", Encode.enum Api.Enum.ReactionContent.toString input.content |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAddStarInput : AddStarInputRequiredFields -> (AddStarInputOptionalFields -> AddStarInputOptionalFields) -> AddStarInput
buildAddStarInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { starrableId = required.starrableId, clientMutationId = optionals.clientMutationId }


type alias AddStarInputRequiredFields =
    { starrableId : Api.ScalarCodecs.Id }


type alias AddStarInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddStarInput input object.
-}
type alias AddStarInput =
    { starrableId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddStarInput into a value that can be used as an argument.
-}
encodeAddStarInput : AddStarInput -> Value
encodeAddStarInput input =
    Encode.maybeObject
        [ ( "starrableId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.starrableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildArchiveRepositoryInput : ArchiveRepositoryInputRequiredFields -> (ArchiveRepositoryInputOptionalFields -> ArchiveRepositoryInputOptionalFields) -> ArchiveRepositoryInput
buildArchiveRepositoryInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, clientMutationId = optionals.clientMutationId }


type alias ArchiveRepositoryInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id }


type alias ArchiveRepositoryInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ArchiveRepositoryInput input object.
-}
type alias ArchiveRepositoryInput =
    { repositoryId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ArchiveRepositoryInput into a value that can be used as an argument.
-}
encodeArchiveRepositoryInput : ArchiveRepositoryInput -> Value
encodeArchiveRepositoryInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildAuditLogOrder : (AuditLogOrderOptionalFields -> AuditLogOrderOptionalFields) -> AuditLogOrder
buildAuditLogOrder fillOptionals =
    let
        optionals =
            fillOptionals
                { field = Absent, direction = Absent }
    in
    { field = optionals.field, direction = optionals.direction }


type alias AuditLogOrderOptionalFields =
    { field : OptionalArgument Api.Enum.AuditLogOrderField.AuditLogOrderField
    , direction : OptionalArgument Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the AuditLogOrder input object.
-}
type alias AuditLogOrder =
    { field : OptionalArgument Api.Enum.AuditLogOrderField.AuditLogOrderField
    , direction : OptionalArgument Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a AuditLogOrder into a value that can be used as an argument.
-}
encodeAuditLogOrder : AuditLogOrder -> Value
encodeAuditLogOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.AuditLogOrderField.toString |> Encode.optional input.field ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString |> Encode.optional input.direction ) ]


buildCancelEnterpriseAdminInvitationInput : CancelEnterpriseAdminInvitationInputRequiredFields -> (CancelEnterpriseAdminInvitationInputOptionalFields -> CancelEnterpriseAdminInvitationInputOptionalFields) -> CancelEnterpriseAdminInvitationInput
buildCancelEnterpriseAdminInvitationInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { invitationId = required.invitationId, clientMutationId = optionals.clientMutationId }


type alias CancelEnterpriseAdminInvitationInputRequiredFields =
    { invitationId : Api.ScalarCodecs.Id }


type alias CancelEnterpriseAdminInvitationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CancelEnterpriseAdminInvitationInput input object.
-}
type alias CancelEnterpriseAdminInvitationInput =
    { invitationId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CancelEnterpriseAdminInvitationInput into a value that can be used as an argument.
-}
encodeCancelEnterpriseAdminInvitationInput : CancelEnterpriseAdminInvitationInput -> Value
encodeCancelEnterpriseAdminInvitationInput input =
    Encode.maybeObject
        [ ( "invitationId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.invitationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildChangeUserStatusInput : (ChangeUserStatusInputOptionalFields -> ChangeUserStatusInputOptionalFields) -> ChangeUserStatusInput
buildChangeUserStatusInput fillOptionals =
    let
        optionals =
            fillOptionals
                { emoji = Absent, message = Absent, organizationId = Absent, limitedAvailability = Absent, expiresAt = Absent, clientMutationId = Absent }
    in
    { emoji = optionals.emoji, message = optionals.message, organizationId = optionals.organizationId, limitedAvailability = optionals.limitedAvailability, expiresAt = optionals.expiresAt, clientMutationId = optionals.clientMutationId }


type alias ChangeUserStatusInputOptionalFields =
    { emoji : OptionalArgument String
    , message : OptionalArgument String
    , organizationId : OptionalArgument Api.ScalarCodecs.Id
    , limitedAvailability : OptionalArgument Bool
    , expiresAt : OptionalArgument Api.ScalarCodecs.DateTime
    , clientMutationId : OptionalArgument String
    }


{-| Type for the ChangeUserStatusInput input object.
-}
type alias ChangeUserStatusInput =
    { emoji : OptionalArgument String
    , message : OptionalArgument String
    , organizationId : OptionalArgument Api.ScalarCodecs.Id
    , limitedAvailability : OptionalArgument Bool
    , expiresAt : OptionalArgument Api.ScalarCodecs.DateTime
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ChangeUserStatusInput into a value that can be used as an argument.
-}
encodeChangeUserStatusInput : ChangeUserStatusInput -> Value
encodeChangeUserStatusInput input =
    Encode.maybeObject
        [ ( "emoji", Encode.string |> Encode.optional input.emoji ), ( "message", Encode.string |> Encode.optional input.message ), ( "organizationId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.organizationId ), ( "limitedAvailability", Encode.bool |> Encode.optional input.limitedAvailability ), ( "expiresAt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.expiresAt ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildClearLabelsFromLabelableInput : ClearLabelsFromLabelableInputRequiredFields -> (ClearLabelsFromLabelableInputOptionalFields -> ClearLabelsFromLabelableInputOptionalFields) -> ClearLabelsFromLabelableInput
buildClearLabelsFromLabelableInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { labelableId = required.labelableId, clientMutationId = optionals.clientMutationId }


type alias ClearLabelsFromLabelableInputRequiredFields =
    { labelableId : Api.ScalarCodecs.Id }


type alias ClearLabelsFromLabelableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ClearLabelsFromLabelableInput input object.
-}
type alias ClearLabelsFromLabelableInput =
    { labelableId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ClearLabelsFromLabelableInput into a value that can be used as an argument.
-}
encodeClearLabelsFromLabelableInput : ClearLabelsFromLabelableInput -> Value
encodeClearLabelsFromLabelableInput input =
    Encode.maybeObject
        [ ( "labelableId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.labelableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCloneProjectInput : CloneProjectInputRequiredFields -> (CloneProjectInputOptionalFields -> CloneProjectInputOptionalFields) -> CloneProjectInput
buildCloneProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { body = Absent, public = Absent, clientMutationId = Absent }
    in
    { targetOwnerId = required.targetOwnerId, sourceId = required.sourceId, includeWorkflows = required.includeWorkflows, name = required.name, body = optionals.body, public = optionals.public, clientMutationId = optionals.clientMutationId }


type alias CloneProjectInputRequiredFields =
    { targetOwnerId : Api.ScalarCodecs.Id
    , sourceId : Api.ScalarCodecs.Id
    , includeWorkflows : Bool
    , name : String
    }


type alias CloneProjectInputOptionalFields =
    { body : OptionalArgument String
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CloneProjectInput input object.
-}
type alias CloneProjectInput =
    { targetOwnerId : Api.ScalarCodecs.Id
    , sourceId : Api.ScalarCodecs.Id
    , includeWorkflows : Bool
    , name : String
    , body : OptionalArgument String
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CloneProjectInput into a value that can be used as an argument.
-}
encodeCloneProjectInput : CloneProjectInput -> Value
encodeCloneProjectInput input =
    Encode.maybeObject
        [ ( "targetOwnerId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.targetOwnerId |> Just ), ( "sourceId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.sourceId |> Just ), ( "includeWorkflows", Encode.bool input.includeWorkflows |> Just ), ( "name", Encode.string input.name |> Just ), ( "body", Encode.string |> Encode.optional input.body ), ( "public", Encode.bool |> Encode.optional input.public ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCloneTemplateRepositoryInput : CloneTemplateRepositoryInputRequiredFields -> (CloneTemplateRepositoryInputOptionalFields -> CloneTemplateRepositoryInputOptionalFields) -> CloneTemplateRepositoryInput
buildCloneTemplateRepositoryInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { description = Absent, clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, name = required.name, ownerId = required.ownerId, description = optionals.description, visibility = required.visibility, clientMutationId = optionals.clientMutationId }


type alias CloneTemplateRepositoryInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id
    , name : String
    , ownerId : Api.ScalarCodecs.Id
    , visibility : Api.Enum.RepositoryVisibility.RepositoryVisibility
    }


type alias CloneTemplateRepositoryInputOptionalFields =
    { description : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CloneTemplateRepositoryInput input object.
-}
type alias CloneTemplateRepositoryInput =
    { repositoryId : Api.ScalarCodecs.Id
    , name : String
    , ownerId : Api.ScalarCodecs.Id
    , description : OptionalArgument String
    , visibility : Api.Enum.RepositoryVisibility.RepositoryVisibility
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CloneTemplateRepositoryInput into a value that can be used as an argument.
-}
encodeCloneTemplateRepositoryInput : CloneTemplateRepositoryInput -> Value
encodeCloneTemplateRepositoryInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "name", Encode.string input.name |> Just ), ( "ownerId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.ownerId |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "visibility", Encode.enum Api.Enum.RepositoryVisibility.toString input.visibility |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCloseIssueInput : CloseIssueInputRequiredFields -> (CloseIssueInputOptionalFields -> CloseIssueInputOptionalFields) -> CloseIssueInput
buildCloseIssueInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { issueId = required.issueId, clientMutationId = optionals.clientMutationId }


type alias CloseIssueInputRequiredFields =
    { issueId : Api.ScalarCodecs.Id }


type alias CloseIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CloseIssueInput input object.
-}
type alias CloseIssueInput =
    { issueId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CloseIssueInput into a value that can be used as an argument.
-}
encodeCloseIssueInput : CloseIssueInput -> Value
encodeCloseIssueInput input =
    Encode.maybeObject
        [ ( "issueId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.issueId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildClosePullRequestInput : ClosePullRequestInputRequiredFields -> (ClosePullRequestInputOptionalFields -> ClosePullRequestInputOptionalFields) -> ClosePullRequestInput
buildClosePullRequestInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { pullRequestId = required.pullRequestId, clientMutationId = optionals.clientMutationId }


type alias ClosePullRequestInputRequiredFields =
    { pullRequestId : Api.ScalarCodecs.Id }


type alias ClosePullRequestInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ClosePullRequestInput input object.
-}
type alias ClosePullRequestInput =
    { pullRequestId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ClosePullRequestInput into a value that can be used as an argument.
-}
encodeClosePullRequestInput : ClosePullRequestInput -> Value
encodeClosePullRequestInput input =
    Encode.maybeObject
        [ ( "pullRequestId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.pullRequestId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCommitAuthor : (CommitAuthorOptionalFields -> CommitAuthorOptionalFields) -> CommitAuthor
buildCommitAuthor fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, emails = Absent }
    in
    { id = optionals.id, emails = optionals.emails }


type alias CommitAuthorOptionalFields =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , emails : OptionalArgument (List String)
    }


{-| Type for the CommitAuthor input object.
-}
type alias CommitAuthor =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , emails : OptionalArgument (List String)
    }


{-| Encode a CommitAuthor into a value that can be used as an argument.
-}
encodeCommitAuthor : CommitAuthor -> Value
encodeCommitAuthor input =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "emails", (Encode.string |> Encode.list) |> Encode.optional input.emails ) ]


buildCommitContributionOrder : CommitContributionOrderRequiredFields -> CommitContributionOrder
buildCommitContributionOrder required =
    { field = required.field, direction = required.direction }


type alias CommitContributionOrderRequiredFields =
    { field : Api.Enum.CommitContributionOrderField.CommitContributionOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the CommitContributionOrder input object.
-}
type alias CommitContributionOrder =
    { field : Api.Enum.CommitContributionOrderField.CommitContributionOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a CommitContributionOrder into a value that can be used as an argument.
-}
encodeCommitContributionOrder : CommitContributionOrder -> Value
encodeCommitContributionOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.CommitContributionOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildContributionOrder : ContributionOrderRequiredFields -> (ContributionOrderOptionalFields -> ContributionOrderOptionalFields) -> ContributionOrder
buildContributionOrder required fillOptionals =
    let
        optionals =
            fillOptionals
                { field = Absent }
    in
    { field = optionals.field, direction = required.direction }


type alias ContributionOrderRequiredFields =
    { direction : Api.Enum.OrderDirection.OrderDirection }


type alias ContributionOrderOptionalFields =
    { field : OptionalArgument Api.Enum.ContributionOrderField.ContributionOrderField }


{-| Type for the ContributionOrder input object.
-}
type alias ContributionOrder =
    { field : OptionalArgument Api.Enum.ContributionOrderField.ContributionOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ContributionOrder into a value that can be used as an argument.
-}
encodeContributionOrder : ContributionOrder -> Value
encodeContributionOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.ContributionOrderField.toString |> Encode.optional input.field ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildConvertProjectCardNoteToIssueInput : ConvertProjectCardNoteToIssueInputRequiredFields -> (ConvertProjectCardNoteToIssueInputOptionalFields -> ConvertProjectCardNoteToIssueInputOptionalFields) -> ConvertProjectCardNoteToIssueInput
buildConvertProjectCardNoteToIssueInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { title = Absent, body = Absent, clientMutationId = Absent }
    in
    { projectCardId = required.projectCardId, repositoryId = required.repositoryId, title = optionals.title, body = optionals.body, clientMutationId = optionals.clientMutationId }


type alias ConvertProjectCardNoteToIssueInputRequiredFields =
    { projectCardId : Api.ScalarCodecs.Id
    , repositoryId : Api.ScalarCodecs.Id
    }


type alias ConvertProjectCardNoteToIssueInputOptionalFields =
    { title : OptionalArgument String
    , body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the ConvertProjectCardNoteToIssueInput input object.
-}
type alias ConvertProjectCardNoteToIssueInput =
    { projectCardId : Api.ScalarCodecs.Id
    , repositoryId : Api.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ConvertProjectCardNoteToIssueInput into a value that can be used as an argument.
-}
encodeConvertProjectCardNoteToIssueInput : ConvertProjectCardNoteToIssueInput -> Value
encodeConvertProjectCardNoteToIssueInput input =
    Encode.maybeObject
        [ ( "projectCardId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.projectCardId |> Just ), ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "title", Encode.string |> Encode.optional input.title ), ( "body", Encode.string |> Encode.optional input.body ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreateBranchProtectionRuleInput : CreateBranchProtectionRuleInputRequiredFields -> (CreateBranchProtectionRuleInputOptionalFields -> CreateBranchProtectionRuleInputOptionalFields) -> CreateBranchProtectionRuleInput
buildCreateBranchProtectionRuleInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { requiresApprovingReviews = Absent, requiredApprovingReviewCount = Absent, requiresCommitSignatures = Absent, isAdminEnforced = Absent, requiresStatusChecks = Absent, requiresStrictStatusChecks = Absent, requiresCodeOwnerReviews = Absent, dismissesStaleReviews = Absent, restrictsReviewDismissals = Absent, reviewDismissalActorIds = Absent, restrictsPushes = Absent, pushActorIds = Absent, requiredStatusCheckContexts = Absent, clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, pattern = required.pattern, requiresApprovingReviews = optionals.requiresApprovingReviews, requiredApprovingReviewCount = optionals.requiredApprovingReviewCount, requiresCommitSignatures = optionals.requiresCommitSignatures, isAdminEnforced = optionals.isAdminEnforced, requiresStatusChecks = optionals.requiresStatusChecks, requiresStrictStatusChecks = optionals.requiresStrictStatusChecks, requiresCodeOwnerReviews = optionals.requiresCodeOwnerReviews, dismissesStaleReviews = optionals.dismissesStaleReviews, restrictsReviewDismissals = optionals.restrictsReviewDismissals, reviewDismissalActorIds = optionals.reviewDismissalActorIds, restrictsPushes = optionals.restrictsPushes, pushActorIds = optionals.pushActorIds, requiredStatusCheckContexts = optionals.requiredStatusCheckContexts, clientMutationId = optionals.clientMutationId }


type alias CreateBranchProtectionRuleInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id
    , pattern : String
    }


type alias CreateBranchProtectionRuleInputOptionalFields =
    { requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateBranchProtectionRuleInput input object.
-}
type alias CreateBranchProtectionRuleInput =
    { repositoryId : Api.ScalarCodecs.Id
    , pattern : String
    , requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateBranchProtectionRuleInput into a value that can be used as an argument.
-}
encodeCreateBranchProtectionRuleInput : CreateBranchProtectionRuleInput -> Value
encodeCreateBranchProtectionRuleInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "pattern", Encode.string input.pattern |> Just ), ( "requiresApprovingReviews", Encode.bool |> Encode.optional input.requiresApprovingReviews ), ( "requiredApprovingReviewCount", Encode.int |> Encode.optional input.requiredApprovingReviewCount ), ( "requiresCommitSignatures", Encode.bool |> Encode.optional input.requiresCommitSignatures ), ( "isAdminEnforced", Encode.bool |> Encode.optional input.isAdminEnforced ), ( "requiresStatusChecks", Encode.bool |> Encode.optional input.requiresStatusChecks ), ( "requiresStrictStatusChecks", Encode.bool |> Encode.optional input.requiresStrictStatusChecks ), ( "requiresCodeOwnerReviews", Encode.bool |> Encode.optional input.requiresCodeOwnerReviews ), ( "dismissesStaleReviews", Encode.bool |> Encode.optional input.dismissesStaleReviews ), ( "restrictsReviewDismissals", Encode.bool |> Encode.optional input.restrictsReviewDismissals ), ( "reviewDismissalActorIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.reviewDismissalActorIds ), ( "restrictsPushes", Encode.bool |> Encode.optional input.restrictsPushes ), ( "pushActorIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.pushActorIds ), ( "requiredStatusCheckContexts", (Encode.string |> Encode.list) |> Encode.optional input.requiredStatusCheckContexts ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreateEnterpriseOrganizationInput : CreateEnterpriseOrganizationInputRequiredFields -> (CreateEnterpriseOrganizationInputOptionalFields -> CreateEnterpriseOrganizationInputOptionalFields) -> CreateEnterpriseOrganizationInput
buildCreateEnterpriseOrganizationInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, login = required.login, profileName = required.profileName, billingEmail = required.billingEmail, adminLogins = required.adminLogins, clientMutationId = optionals.clientMutationId }


type alias CreateEnterpriseOrganizationInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , login : String
    , profileName : String
    , billingEmail : String
    , adminLogins : List String
    }


type alias CreateEnterpriseOrganizationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateEnterpriseOrganizationInput input object.
-}
type alias CreateEnterpriseOrganizationInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , login : String
    , profileName : String
    , billingEmail : String
    , adminLogins : List String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateEnterpriseOrganizationInput into a value that can be used as an argument.
-}
encodeCreateEnterpriseOrganizationInput : CreateEnterpriseOrganizationInput -> Value
encodeCreateEnterpriseOrganizationInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "login", Encode.string input.login |> Just ), ( "profileName", Encode.string input.profileName |> Just ), ( "billingEmail", Encode.string input.billingEmail |> Just ), ( "adminLogins", (Encode.string |> Encode.list) input.adminLogins |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreateIssueInput : CreateIssueInputRequiredFields -> (CreateIssueInputOptionalFields -> CreateIssueInputOptionalFields) -> CreateIssueInput
buildCreateIssueInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { body = Absent, assigneeIds = Absent, milestoneId = Absent, labelIds = Absent, projectIds = Absent, clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, title = required.title, body = optionals.body, assigneeIds = optionals.assigneeIds, milestoneId = optionals.milestoneId, labelIds = optionals.labelIds, projectIds = optionals.projectIds, clientMutationId = optionals.clientMutationId }


type alias CreateIssueInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id
    , title : String
    }


type alias CreateIssueInputOptionalFields =
    { body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Api.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , projectIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateIssueInput input object.
-}
type alias CreateIssueInput =
    { repositoryId : Api.ScalarCodecs.Id
    , title : String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Api.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , projectIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateIssueInput into a value that can be used as an argument.
-}
encodeCreateIssueInput : CreateIssueInput -> Value
encodeCreateIssueInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "title", Encode.string input.title |> Just ), ( "body", Encode.string |> Encode.optional input.body ), ( "assigneeIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.assigneeIds ), ( "milestoneId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.milestoneId ), ( "labelIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.labelIds ), ( "projectIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.projectIds ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreateProjectInput : CreateProjectInputRequiredFields -> (CreateProjectInputOptionalFields -> CreateProjectInputOptionalFields) -> CreateProjectInput
buildCreateProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { body = Absent, template = Absent, repositoryIds = Absent, clientMutationId = Absent }
    in
    { ownerId = required.ownerId, name = required.name, body = optionals.body, template = optionals.template, repositoryIds = optionals.repositoryIds, clientMutationId = optionals.clientMutationId }


type alias CreateProjectInputRequiredFields =
    { ownerId : Api.ScalarCodecs.Id
    , name : String
    }


type alias CreateProjectInputOptionalFields =
    { body : OptionalArgument String
    , template : OptionalArgument Api.Enum.ProjectTemplate.ProjectTemplate
    , repositoryIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateProjectInput input object.
-}
type alias CreateProjectInput =
    { ownerId : Api.ScalarCodecs.Id
    , name : String
    , body : OptionalArgument String
    , template : OptionalArgument Api.Enum.ProjectTemplate.ProjectTemplate
    , repositoryIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateProjectInput into a value that can be used as an argument.
-}
encodeCreateProjectInput : CreateProjectInput -> Value
encodeCreateProjectInput input =
    Encode.maybeObject
        [ ( "ownerId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.ownerId |> Just ), ( "name", Encode.string input.name |> Just ), ( "body", Encode.string |> Encode.optional input.body ), ( "template", Encode.enum Api.Enum.ProjectTemplate.toString |> Encode.optional input.template ), ( "repositoryIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.repositoryIds ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreatePullRequestInput : CreatePullRequestInputRequiredFields -> (CreatePullRequestInputOptionalFields -> CreatePullRequestInputOptionalFields) -> CreatePullRequestInput
buildCreatePullRequestInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { body = Absent, maintainerCanModify = Absent, clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, baseRefName = required.baseRefName, headRefName = required.headRefName, title = required.title, body = optionals.body, maintainerCanModify = optionals.maintainerCanModify, clientMutationId = optionals.clientMutationId }


type alias CreatePullRequestInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id
    , baseRefName : String
    , headRefName : String
    , title : String
    }


type alias CreatePullRequestInputOptionalFields =
    { body : OptionalArgument String
    , maintainerCanModify : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreatePullRequestInput input object.
-}
type alias CreatePullRequestInput =
    { repositoryId : Api.ScalarCodecs.Id
    , baseRefName : String
    , headRefName : String
    , title : String
    , body : OptionalArgument String
    , maintainerCanModify : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreatePullRequestInput into a value that can be used as an argument.
-}
encodeCreatePullRequestInput : CreatePullRequestInput -> Value
encodeCreatePullRequestInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "baseRefName", Encode.string input.baseRefName |> Just ), ( "headRefName", Encode.string input.headRefName |> Just ), ( "title", Encode.string input.title |> Just ), ( "body", Encode.string |> Encode.optional input.body ), ( "maintainerCanModify", Encode.bool |> Encode.optional input.maintainerCanModify ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreateRefInput : CreateRefInputRequiredFields -> (CreateRefInputOptionalFields -> CreateRefInputOptionalFields) -> CreateRefInput
buildCreateRefInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, name = required.name, oid = required.oid, clientMutationId = optionals.clientMutationId }


type alias CreateRefInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id
    , name : String
    , oid : Api.ScalarCodecs.GitObjectID
    }


type alias CreateRefInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateRefInput input object.
-}
type alias CreateRefInput =
    { repositoryId : Api.ScalarCodecs.Id
    , name : String
    , oid : Api.ScalarCodecs.GitObjectID
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateRefInput into a value that can be used as an argument.
-}
encodeCreateRefInput : CreateRefInput -> Value
encodeCreateRefInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "name", Encode.string input.name |> Just ), ( "oid", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecGitObjectID) input.oid |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreateRepositoryInput : CreateRepositoryInputRequiredFields -> (CreateRepositoryInputOptionalFields -> CreateRepositoryInputOptionalFields) -> CreateRepositoryInput
buildCreateRepositoryInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { ownerId = Absent, description = Absent, template = Absent, homepageUrl = Absent, hasWikiEnabled = Absent, hasIssuesEnabled = Absent, teamId = Absent, clientMutationId = Absent }
    in
    { name = required.name, ownerId = optionals.ownerId, description = optionals.description, visibility = required.visibility, template = optionals.template, homepageUrl = optionals.homepageUrl, hasWikiEnabled = optionals.hasWikiEnabled, hasIssuesEnabled = optionals.hasIssuesEnabled, teamId = optionals.teamId, clientMutationId = optionals.clientMutationId }


type alias CreateRepositoryInputRequiredFields =
    { name : String
    , visibility : Api.Enum.RepositoryVisibility.RepositoryVisibility
    }


type alias CreateRepositoryInputOptionalFields =
    { ownerId : OptionalArgument Api.ScalarCodecs.Id
    , description : OptionalArgument String
    , template : OptionalArgument Bool
    , homepageUrl : OptionalArgument Api.ScalarCodecs.Uri
    , hasWikiEnabled : OptionalArgument Bool
    , hasIssuesEnabled : OptionalArgument Bool
    , teamId : OptionalArgument Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateRepositoryInput input object.
-}
type alias CreateRepositoryInput =
    { name : String
    , ownerId : OptionalArgument Api.ScalarCodecs.Id
    , description : OptionalArgument String
    , visibility : Api.Enum.RepositoryVisibility.RepositoryVisibility
    , template : OptionalArgument Bool
    , homepageUrl : OptionalArgument Api.ScalarCodecs.Uri
    , hasWikiEnabled : OptionalArgument Bool
    , hasIssuesEnabled : OptionalArgument Bool
    , teamId : OptionalArgument Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateRepositoryInput into a value that can be used as an argument.
-}
encodeCreateRepositoryInput : CreateRepositoryInput -> Value
encodeCreateRepositoryInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "ownerId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.ownerId ), ( "description", Encode.string |> Encode.optional input.description ), ( "visibility", Encode.enum Api.Enum.RepositoryVisibility.toString input.visibility |> Just ), ( "template", Encode.bool |> Encode.optional input.template ), ( "homepageUrl", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUri) |> Encode.optional input.homepageUrl ), ( "hasWikiEnabled", Encode.bool |> Encode.optional input.hasWikiEnabled ), ( "hasIssuesEnabled", Encode.bool |> Encode.optional input.hasIssuesEnabled ), ( "teamId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.teamId ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreateTeamDiscussionCommentInput : CreateTeamDiscussionCommentInputRequiredFields -> (CreateTeamDiscussionCommentInputOptionalFields -> CreateTeamDiscussionCommentInputOptionalFields) -> CreateTeamDiscussionCommentInput
buildCreateTeamDiscussionCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { discussionId = required.discussionId, body = required.body, clientMutationId = optionals.clientMutationId }


type alias CreateTeamDiscussionCommentInputRequiredFields =
    { discussionId : Api.ScalarCodecs.Id
    , body : String
    }


type alias CreateTeamDiscussionCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateTeamDiscussionCommentInput input object.
-}
type alias CreateTeamDiscussionCommentInput =
    { discussionId : Api.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateTeamDiscussionCommentInput into a value that can be used as an argument.
-}
encodeCreateTeamDiscussionCommentInput : CreateTeamDiscussionCommentInput -> Value
encodeCreateTeamDiscussionCommentInput input =
    Encode.maybeObject
        [ ( "discussionId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.discussionId |> Just ), ( "body", Encode.string input.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildCreateTeamDiscussionInput : CreateTeamDiscussionInputRequiredFields -> (CreateTeamDiscussionInputOptionalFields -> CreateTeamDiscussionInputOptionalFields) -> CreateTeamDiscussionInput
buildCreateTeamDiscussionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { private = Absent, clientMutationId = Absent }
    in
    { teamId = required.teamId, title = required.title, body = required.body, private = optionals.private, clientMutationId = optionals.clientMutationId }


type alias CreateTeamDiscussionInputRequiredFields =
    { teamId : Api.ScalarCodecs.Id
    , title : String
    , body : String
    }


type alias CreateTeamDiscussionInputOptionalFields =
    { private : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateTeamDiscussionInput input object.
-}
type alias CreateTeamDiscussionInput =
    { teamId : Api.ScalarCodecs.Id
    , title : String
    , body : String
    , private : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateTeamDiscussionInput into a value that can be used as an argument.
-}
encodeCreateTeamDiscussionInput : CreateTeamDiscussionInput -> Value
encodeCreateTeamDiscussionInput input =
    Encode.maybeObject
        [ ( "teamId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.teamId |> Just ), ( "title", Encode.string input.title |> Just ), ( "body", Encode.string input.body |> Just ), ( "private", Encode.bool |> Encode.optional input.private ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeclineTopicSuggestionInput : DeclineTopicSuggestionInputRequiredFields -> (DeclineTopicSuggestionInputOptionalFields -> DeclineTopicSuggestionInputOptionalFields) -> DeclineTopicSuggestionInput
buildDeclineTopicSuggestionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, name = required.name, reason = required.reason, clientMutationId = optionals.clientMutationId }


type alias DeclineTopicSuggestionInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id
    , name : String
    , reason : Api.Enum.TopicSuggestionDeclineReason.TopicSuggestionDeclineReason
    }


type alias DeclineTopicSuggestionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeclineTopicSuggestionInput input object.
-}
type alias DeclineTopicSuggestionInput =
    { repositoryId : Api.ScalarCodecs.Id
    , name : String
    , reason : Api.Enum.TopicSuggestionDeclineReason.TopicSuggestionDeclineReason
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeclineTopicSuggestionInput into a value that can be used as an argument.
-}
encodeDeclineTopicSuggestionInput : DeclineTopicSuggestionInput -> Value
encodeDeclineTopicSuggestionInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "name", Encode.string input.name |> Just ), ( "reason", Encode.enum Api.Enum.TopicSuggestionDeclineReason.toString input.reason |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteBranchProtectionRuleInput : DeleteBranchProtectionRuleInputRequiredFields -> (DeleteBranchProtectionRuleInputOptionalFields -> DeleteBranchProtectionRuleInputOptionalFields) -> DeleteBranchProtectionRuleInput
buildDeleteBranchProtectionRuleInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { branchProtectionRuleId = required.branchProtectionRuleId, clientMutationId = optionals.clientMutationId }


type alias DeleteBranchProtectionRuleInputRequiredFields =
    { branchProtectionRuleId : Api.ScalarCodecs.Id }


type alias DeleteBranchProtectionRuleInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteBranchProtectionRuleInput input object.
-}
type alias DeleteBranchProtectionRuleInput =
    { branchProtectionRuleId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteBranchProtectionRuleInput into a value that can be used as an argument.
-}
encodeDeleteBranchProtectionRuleInput : DeleteBranchProtectionRuleInput -> Value
encodeDeleteBranchProtectionRuleInput input =
    Encode.maybeObject
        [ ( "branchProtectionRuleId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.branchProtectionRuleId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteDeploymentInput : DeleteDeploymentInputRequiredFields -> (DeleteDeploymentInputOptionalFields -> DeleteDeploymentInputOptionalFields) -> DeleteDeploymentInput
buildDeleteDeploymentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { id = required.id, clientMutationId = optionals.clientMutationId }


type alias DeleteDeploymentInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias DeleteDeploymentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteDeploymentInput input object.
-}
type alias DeleteDeploymentInput =
    { id : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteDeploymentInput into a value that can be used as an argument.
-}
encodeDeleteDeploymentInput : DeleteDeploymentInput -> Value
encodeDeleteDeploymentInput input =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteIssueCommentInput : DeleteIssueCommentInputRequiredFields -> (DeleteIssueCommentInputOptionalFields -> DeleteIssueCommentInputOptionalFields) -> DeleteIssueCommentInput
buildDeleteIssueCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { id = required.id, clientMutationId = optionals.clientMutationId }


type alias DeleteIssueCommentInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias DeleteIssueCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteIssueCommentInput input object.
-}
type alias DeleteIssueCommentInput =
    { id : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteIssueCommentInput into a value that can be used as an argument.
-}
encodeDeleteIssueCommentInput : DeleteIssueCommentInput -> Value
encodeDeleteIssueCommentInput input =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteIssueInput : DeleteIssueInputRequiredFields -> (DeleteIssueInputOptionalFields -> DeleteIssueInputOptionalFields) -> DeleteIssueInput
buildDeleteIssueInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { issueId = required.issueId, clientMutationId = optionals.clientMutationId }


type alias DeleteIssueInputRequiredFields =
    { issueId : Api.ScalarCodecs.Id }


type alias DeleteIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteIssueInput input object.
-}
type alias DeleteIssueInput =
    { issueId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteIssueInput into a value that can be used as an argument.
-}
encodeDeleteIssueInput : DeleteIssueInput -> Value
encodeDeleteIssueInput input =
    Encode.maybeObject
        [ ( "issueId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.issueId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteProjectCardInput : DeleteProjectCardInputRequiredFields -> (DeleteProjectCardInputOptionalFields -> DeleteProjectCardInputOptionalFields) -> DeleteProjectCardInput
buildDeleteProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { cardId = required.cardId, clientMutationId = optionals.clientMutationId }


type alias DeleteProjectCardInputRequiredFields =
    { cardId : Api.ScalarCodecs.Id }


type alias DeleteProjectCardInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectCardInput input object.
-}
type alias DeleteProjectCardInput =
    { cardId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectCardInput into a value that can be used as an argument.
-}
encodeDeleteProjectCardInput : DeleteProjectCardInput -> Value
encodeDeleteProjectCardInput input =
    Encode.maybeObject
        [ ( "cardId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.cardId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteProjectColumnInput : DeleteProjectColumnInputRequiredFields -> (DeleteProjectColumnInputOptionalFields -> DeleteProjectColumnInputOptionalFields) -> DeleteProjectColumnInput
buildDeleteProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { columnId = required.columnId, clientMutationId = optionals.clientMutationId }


type alias DeleteProjectColumnInputRequiredFields =
    { columnId : Api.ScalarCodecs.Id }


type alias DeleteProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectColumnInput input object.
-}
type alias DeleteProjectColumnInput =
    { columnId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectColumnInput into a value that can be used as an argument.
-}
encodeDeleteProjectColumnInput : DeleteProjectColumnInput -> Value
encodeDeleteProjectColumnInput input =
    Encode.maybeObject
        [ ( "columnId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.columnId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteProjectInput : DeleteProjectInputRequiredFields -> (DeleteProjectInputOptionalFields -> DeleteProjectInputOptionalFields) -> DeleteProjectInput
buildDeleteProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { projectId = required.projectId, clientMutationId = optionals.clientMutationId }


type alias DeleteProjectInputRequiredFields =
    { projectId : Api.ScalarCodecs.Id }


type alias DeleteProjectInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectInput input object.
-}
type alias DeleteProjectInput =
    { projectId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectInput into a value that can be used as an argument.
-}
encodeDeleteProjectInput : DeleteProjectInput -> Value
encodeDeleteProjectInput input =
    Encode.maybeObject
        [ ( "projectId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.projectId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeletePullRequestReviewCommentInput : DeletePullRequestReviewCommentInputRequiredFields -> (DeletePullRequestReviewCommentInputOptionalFields -> DeletePullRequestReviewCommentInputOptionalFields) -> DeletePullRequestReviewCommentInput
buildDeletePullRequestReviewCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { id = required.id, clientMutationId = optionals.clientMutationId }


type alias DeletePullRequestReviewCommentInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias DeletePullRequestReviewCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeletePullRequestReviewCommentInput input object.
-}
type alias DeletePullRequestReviewCommentInput =
    { id : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeletePullRequestReviewCommentInput into a value that can be used as an argument.
-}
encodeDeletePullRequestReviewCommentInput : DeletePullRequestReviewCommentInput -> Value
encodeDeletePullRequestReviewCommentInput input =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeletePullRequestReviewInput : DeletePullRequestReviewInputRequiredFields -> (DeletePullRequestReviewInputOptionalFields -> DeletePullRequestReviewInputOptionalFields) -> DeletePullRequestReviewInput
buildDeletePullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { pullRequestReviewId = required.pullRequestReviewId, clientMutationId = optionals.clientMutationId }


type alias DeletePullRequestReviewInputRequiredFields =
    { pullRequestReviewId : Api.ScalarCodecs.Id }


type alias DeletePullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeletePullRequestReviewInput input object.
-}
type alias DeletePullRequestReviewInput =
    { pullRequestReviewId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeletePullRequestReviewInput into a value that can be used as an argument.
-}
encodeDeletePullRequestReviewInput : DeletePullRequestReviewInput -> Value
encodeDeletePullRequestReviewInput input =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteRefInput : DeleteRefInputRequiredFields -> (DeleteRefInputOptionalFields -> DeleteRefInputOptionalFields) -> DeleteRefInput
buildDeleteRefInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { refId = required.refId, clientMutationId = optionals.clientMutationId }


type alias DeleteRefInputRequiredFields =
    { refId : Api.ScalarCodecs.Id }


type alias DeleteRefInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteRefInput input object.
-}
type alias DeleteRefInput =
    { refId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteRefInput into a value that can be used as an argument.
-}
encodeDeleteRefInput : DeleteRefInput -> Value
encodeDeleteRefInput input =
    Encode.maybeObject
        [ ( "refId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.refId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteTeamDiscussionCommentInput : DeleteTeamDiscussionCommentInputRequiredFields -> (DeleteTeamDiscussionCommentInputOptionalFields -> DeleteTeamDiscussionCommentInputOptionalFields) -> DeleteTeamDiscussionCommentInput
buildDeleteTeamDiscussionCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { id = required.id, clientMutationId = optionals.clientMutationId }


type alias DeleteTeamDiscussionCommentInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias DeleteTeamDiscussionCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteTeamDiscussionCommentInput input object.
-}
type alias DeleteTeamDiscussionCommentInput =
    { id : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteTeamDiscussionCommentInput into a value that can be used as an argument.
-}
encodeDeleteTeamDiscussionCommentInput : DeleteTeamDiscussionCommentInput -> Value
encodeDeleteTeamDiscussionCommentInput input =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeleteTeamDiscussionInput : DeleteTeamDiscussionInputRequiredFields -> (DeleteTeamDiscussionInputOptionalFields -> DeleteTeamDiscussionInputOptionalFields) -> DeleteTeamDiscussionInput
buildDeleteTeamDiscussionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { id = required.id, clientMutationId = optionals.clientMutationId }


type alias DeleteTeamDiscussionInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias DeleteTeamDiscussionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteTeamDiscussionInput input object.
-}
type alias DeleteTeamDiscussionInput =
    { id : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteTeamDiscussionInput into a value that can be used as an argument.
-}
encodeDeleteTeamDiscussionInput : DeleteTeamDiscussionInput -> Value
encodeDeleteTeamDiscussionInput input =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDeploymentOrder : DeploymentOrderRequiredFields -> DeploymentOrder
buildDeploymentOrder required =
    { field = required.field, direction = required.direction }


type alias DeploymentOrderRequiredFields =
    { field : Api.Enum.DeploymentOrderField.DeploymentOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the DeploymentOrder input object.
-}
type alias DeploymentOrder =
    { field : Api.Enum.DeploymentOrderField.DeploymentOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a DeploymentOrder into a value that can be used as an argument.
-}
encodeDeploymentOrder : DeploymentOrder -> Value
encodeDeploymentOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.DeploymentOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildDismissPullRequestReviewInput : DismissPullRequestReviewInputRequiredFields -> (DismissPullRequestReviewInputOptionalFields -> DismissPullRequestReviewInputOptionalFields) -> DismissPullRequestReviewInput
buildDismissPullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { pullRequestReviewId = required.pullRequestReviewId, message = required.message, clientMutationId = optionals.clientMutationId }


type alias DismissPullRequestReviewInputRequiredFields =
    { pullRequestReviewId : Api.ScalarCodecs.Id
    , message : String
    }


type alias DismissPullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DismissPullRequestReviewInput input object.
-}
type alias DismissPullRequestReviewInput =
    { pullRequestReviewId : Api.ScalarCodecs.Id
    , message : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DismissPullRequestReviewInput into a value that can be used as an argument.
-}
encodeDismissPullRequestReviewInput : DismissPullRequestReviewInput -> Value
encodeDismissPullRequestReviewInput input =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "message", Encode.string input.message |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildDraftPullRequestReviewComment : DraftPullRequestReviewCommentRequiredFields -> DraftPullRequestReviewComment
buildDraftPullRequestReviewComment required =
    { path = required.path, position = required.position, body = required.body }


type alias DraftPullRequestReviewCommentRequiredFields =
    { path : String
    , position : Int
    , body : String
    }


{-| Type for the DraftPullRequestReviewComment input object.
-}
type alias DraftPullRequestReviewComment =
    { path : String
    , position : Int
    , body : String
    }


{-| Encode a DraftPullRequestReviewComment into a value that can be used as an argument.
-}
encodeDraftPullRequestReviewComment : DraftPullRequestReviewComment -> Value
encodeDraftPullRequestReviewComment input =
    Encode.maybeObject
        [ ( "path", Encode.string input.path |> Just ), ( "position", Encode.int input.position |> Just ), ( "body", Encode.string input.body |> Just ) ]


buildEnterpriseAdministratorInvitationOrder : EnterpriseAdministratorInvitationOrderRequiredFields -> EnterpriseAdministratorInvitationOrder
buildEnterpriseAdministratorInvitationOrder required =
    { field = required.field, direction = required.direction }


type alias EnterpriseAdministratorInvitationOrderRequiredFields =
    { field : Api.Enum.EnterpriseAdministratorInvitationOrderField.EnterpriseAdministratorInvitationOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseAdministratorInvitationOrder input object.
-}
type alias EnterpriseAdministratorInvitationOrder =
    { field : Api.Enum.EnterpriseAdministratorInvitationOrderField.EnterpriseAdministratorInvitationOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseAdministratorInvitationOrder into a value that can be used as an argument.
-}
encodeEnterpriseAdministratorInvitationOrder : EnterpriseAdministratorInvitationOrder -> Value
encodeEnterpriseAdministratorInvitationOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.EnterpriseAdministratorInvitationOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildEnterpriseMemberOrder : EnterpriseMemberOrderRequiredFields -> EnterpriseMemberOrder
buildEnterpriseMemberOrder required =
    { field = required.field, direction = required.direction }


type alias EnterpriseMemberOrderRequiredFields =
    { field : Api.Enum.EnterpriseMemberOrderField.EnterpriseMemberOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseMemberOrder input object.
-}
type alias EnterpriseMemberOrder =
    { field : Api.Enum.EnterpriseMemberOrderField.EnterpriseMemberOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseMemberOrder into a value that can be used as an argument.
-}
encodeEnterpriseMemberOrder : EnterpriseMemberOrder -> Value
encodeEnterpriseMemberOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.EnterpriseMemberOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildEnterpriseServerInstallationOrder : EnterpriseServerInstallationOrderRequiredFields -> EnterpriseServerInstallationOrder
buildEnterpriseServerInstallationOrder required =
    { field = required.field, direction = required.direction }


type alias EnterpriseServerInstallationOrderRequiredFields =
    { field : Api.Enum.EnterpriseServerInstallationOrderField.EnterpriseServerInstallationOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseServerInstallationOrder input object.
-}
type alias EnterpriseServerInstallationOrder =
    { field : Api.Enum.EnterpriseServerInstallationOrderField.EnterpriseServerInstallationOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseServerInstallationOrder into a value that can be used as an argument.
-}
encodeEnterpriseServerInstallationOrder : EnterpriseServerInstallationOrder -> Value
encodeEnterpriseServerInstallationOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.EnterpriseServerInstallationOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildEnterpriseServerUserAccountEmailOrder : EnterpriseServerUserAccountEmailOrderRequiredFields -> EnterpriseServerUserAccountEmailOrder
buildEnterpriseServerUserAccountEmailOrder required =
    { field = required.field, direction = required.direction }


type alias EnterpriseServerUserAccountEmailOrderRequiredFields =
    { field : Api.Enum.EnterpriseServerUserAccountEmailOrderField.EnterpriseServerUserAccountEmailOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseServerUserAccountEmailOrder input object.
-}
type alias EnterpriseServerUserAccountEmailOrder =
    { field : Api.Enum.EnterpriseServerUserAccountEmailOrderField.EnterpriseServerUserAccountEmailOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseServerUserAccountEmailOrder into a value that can be used as an argument.
-}
encodeEnterpriseServerUserAccountEmailOrder : EnterpriseServerUserAccountEmailOrder -> Value
encodeEnterpriseServerUserAccountEmailOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.EnterpriseServerUserAccountEmailOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildEnterpriseServerUserAccountOrder : EnterpriseServerUserAccountOrderRequiredFields -> EnterpriseServerUserAccountOrder
buildEnterpriseServerUserAccountOrder required =
    { field = required.field, direction = required.direction }


type alias EnterpriseServerUserAccountOrderRequiredFields =
    { field : Api.Enum.EnterpriseServerUserAccountOrderField.EnterpriseServerUserAccountOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseServerUserAccountOrder input object.
-}
type alias EnterpriseServerUserAccountOrder =
    { field : Api.Enum.EnterpriseServerUserAccountOrderField.EnterpriseServerUserAccountOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseServerUserAccountOrder into a value that can be used as an argument.
-}
encodeEnterpriseServerUserAccountOrder : EnterpriseServerUserAccountOrder -> Value
encodeEnterpriseServerUserAccountOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.EnterpriseServerUserAccountOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildEnterpriseServerUserAccountsUploadOrder : EnterpriseServerUserAccountsUploadOrderRequiredFields -> EnterpriseServerUserAccountsUploadOrder
buildEnterpriseServerUserAccountsUploadOrder required =
    { field = required.field, direction = required.direction }


type alias EnterpriseServerUserAccountsUploadOrderRequiredFields =
    { field : Api.Enum.EnterpriseServerUserAccountsUploadOrderField.EnterpriseServerUserAccountsUploadOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseServerUserAccountsUploadOrder input object.
-}
type alias EnterpriseServerUserAccountsUploadOrder =
    { field : Api.Enum.EnterpriseServerUserAccountsUploadOrderField.EnterpriseServerUserAccountsUploadOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseServerUserAccountsUploadOrder into a value that can be used as an argument.
-}
encodeEnterpriseServerUserAccountsUploadOrder : EnterpriseServerUserAccountsUploadOrder -> Value
encodeEnterpriseServerUserAccountsUploadOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.EnterpriseServerUserAccountsUploadOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildFollowUserInput : FollowUserInputRequiredFields -> (FollowUserInputOptionalFields -> FollowUserInputOptionalFields) -> FollowUserInput
buildFollowUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { userId = required.userId, clientMutationId = optionals.clientMutationId }


type alias FollowUserInputRequiredFields =
    { userId : Api.ScalarCodecs.Id }


type alias FollowUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the FollowUserInput input object.
-}
type alias FollowUserInput =
    { userId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a FollowUserInput into a value that can be used as an argument.
-}
encodeFollowUserInput : FollowUserInput -> Value
encodeFollowUserInput input =
    Encode.maybeObject
        [ ( "userId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.userId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildGistOrder : GistOrderRequiredFields -> GistOrder
buildGistOrder required =
    { field = required.field, direction = required.direction }


type alias GistOrderRequiredFields =
    { field : Api.Enum.GistOrderField.GistOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the GistOrder input object.
-}
type alias GistOrder =
    { field : Api.Enum.GistOrderField.GistOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a GistOrder into a value that can be used as an argument.
-}
encodeGistOrder : GistOrder -> Value
encodeGistOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.GistOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildInviteEnterpriseAdminInput : InviteEnterpriseAdminInputRequiredFields -> (InviteEnterpriseAdminInputOptionalFields -> InviteEnterpriseAdminInputOptionalFields) -> InviteEnterpriseAdminInput
buildInviteEnterpriseAdminInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { invitee = Absent, email = Absent, role = Absent, clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, invitee = optionals.invitee, email = optionals.email, role = optionals.role, clientMutationId = optionals.clientMutationId }


type alias InviteEnterpriseAdminInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id }


type alias InviteEnterpriseAdminInputOptionalFields =
    { invitee : OptionalArgument String
    , email : OptionalArgument String
    , role : OptionalArgument Api.Enum.EnterpriseAdministratorRole.EnterpriseAdministratorRole
    , clientMutationId : OptionalArgument String
    }


{-| Type for the InviteEnterpriseAdminInput input object.
-}
type alias InviteEnterpriseAdminInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , invitee : OptionalArgument String
    , email : OptionalArgument String
    , role : OptionalArgument Api.Enum.EnterpriseAdministratorRole.EnterpriseAdministratorRole
    , clientMutationId : OptionalArgument String
    }


{-| Encode a InviteEnterpriseAdminInput into a value that can be used as an argument.
-}
encodeInviteEnterpriseAdminInput : InviteEnterpriseAdminInput -> Value
encodeInviteEnterpriseAdminInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "invitee", Encode.string |> Encode.optional input.invitee ), ( "email", Encode.string |> Encode.optional input.email ), ( "role", Encode.enum Api.Enum.EnterpriseAdministratorRole.toString |> Encode.optional input.role ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildIssueFilters : (IssueFiltersOptionalFields -> IssueFiltersOptionalFields) -> IssueFilters
buildIssueFilters fillOptionals =
    let
        optionals =
            fillOptionals
                { assignee = Absent, createdBy = Absent, labels = Absent, mentioned = Absent, milestone = Absent, since = Absent, states = Absent, viewerSubscribed = Absent }
    in
    { assignee = optionals.assignee, createdBy = optionals.createdBy, labels = optionals.labels, mentioned = optionals.mentioned, milestone = optionals.milestone, since = optionals.since, states = optionals.states, viewerSubscribed = optionals.viewerSubscribed }


type alias IssueFiltersOptionalFields =
    { assignee : OptionalArgument String
    , createdBy : OptionalArgument String
    , labels : OptionalArgument (List String)
    , mentioned : OptionalArgument String
    , milestone : OptionalArgument String
    , since : OptionalArgument Api.ScalarCodecs.DateTime
    , states : OptionalArgument (List Api.Enum.IssueState.IssueState)
    , viewerSubscribed : OptionalArgument Bool
    }


{-| Type for the IssueFilters input object.
-}
type alias IssueFilters =
    { assignee : OptionalArgument String
    , createdBy : OptionalArgument String
    , labels : OptionalArgument (List String)
    , mentioned : OptionalArgument String
    , milestone : OptionalArgument String
    , since : OptionalArgument Api.ScalarCodecs.DateTime
    , states : OptionalArgument (List Api.Enum.IssueState.IssueState)
    , viewerSubscribed : OptionalArgument Bool
    }


{-| Encode a IssueFilters into a value that can be used as an argument.
-}
encodeIssueFilters : IssueFilters -> Value
encodeIssueFilters input =
    Encode.maybeObject
        [ ( "assignee", Encode.string |> Encode.optional input.assignee ), ( "createdBy", Encode.string |> Encode.optional input.createdBy ), ( "labels", (Encode.string |> Encode.list) |> Encode.optional input.labels ), ( "mentioned", Encode.string |> Encode.optional input.mentioned ), ( "milestone", Encode.string |> Encode.optional input.milestone ), ( "since", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.since ), ( "states", (Encode.enum Api.Enum.IssueState.toString |> Encode.list) |> Encode.optional input.states ), ( "viewerSubscribed", Encode.bool |> Encode.optional input.viewerSubscribed ) ]


buildIssueOrder : IssueOrderRequiredFields -> IssueOrder
buildIssueOrder required =
    { field = required.field, direction = required.direction }


type alias IssueOrderRequiredFields =
    { field : Api.Enum.IssueOrderField.IssueOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the IssueOrder input object.
-}
type alias IssueOrder =
    { field : Api.Enum.IssueOrderField.IssueOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a IssueOrder into a value that can be used as an argument.
-}
encodeIssueOrder : IssueOrder -> Value
encodeIssueOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.IssueOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildLabelOrder : LabelOrderRequiredFields -> LabelOrder
buildLabelOrder required =
    { field = required.field, direction = required.direction }


type alias LabelOrderRequiredFields =
    { field : Api.Enum.LabelOrderField.LabelOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the LabelOrder input object.
-}
type alias LabelOrder =
    { field : Api.Enum.LabelOrderField.LabelOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a LabelOrder into a value that can be used as an argument.
-}
encodeLabelOrder : LabelOrder -> Value
encodeLabelOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.LabelOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildLanguageOrder : LanguageOrderRequiredFields -> LanguageOrder
buildLanguageOrder required =
    { field = required.field, direction = required.direction }


type alias LanguageOrderRequiredFields =
    { field : Api.Enum.LanguageOrderField.LanguageOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the LanguageOrder input object.
-}
type alias LanguageOrder =
    { field : Api.Enum.LanguageOrderField.LanguageOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a LanguageOrder into a value that can be used as an argument.
-}
encodeLanguageOrder : LanguageOrder -> Value
encodeLanguageOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.LanguageOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildLinkRepositoryToProjectInput : LinkRepositoryToProjectInputRequiredFields -> (LinkRepositoryToProjectInputOptionalFields -> LinkRepositoryToProjectInputOptionalFields) -> LinkRepositoryToProjectInput
buildLinkRepositoryToProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { projectId = required.projectId, repositoryId = required.repositoryId, clientMutationId = optionals.clientMutationId }


type alias LinkRepositoryToProjectInputRequiredFields =
    { projectId : Api.ScalarCodecs.Id
    , repositoryId : Api.ScalarCodecs.Id
    }


type alias LinkRepositoryToProjectInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the LinkRepositoryToProjectInput input object.
-}
type alias LinkRepositoryToProjectInput =
    { projectId : Api.ScalarCodecs.Id
    , repositoryId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a LinkRepositoryToProjectInput into a value that can be used as an argument.
-}
encodeLinkRepositoryToProjectInput : LinkRepositoryToProjectInput -> Value
encodeLinkRepositoryToProjectInput input =
    Encode.maybeObject
        [ ( "projectId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.projectId |> Just ), ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildLockLockableInput : LockLockableInputRequiredFields -> (LockLockableInputOptionalFields -> LockLockableInputOptionalFields) -> LockLockableInput
buildLockLockableInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { lockReason = Absent, clientMutationId = Absent }
    in
    { lockableId = required.lockableId, lockReason = optionals.lockReason, clientMutationId = optionals.clientMutationId }


type alias LockLockableInputRequiredFields =
    { lockableId : Api.ScalarCodecs.Id }


type alias LockLockableInputOptionalFields =
    { lockReason : OptionalArgument Api.Enum.LockReason.LockReason
    , clientMutationId : OptionalArgument String
    }


{-| Type for the LockLockableInput input object.
-}
type alias LockLockableInput =
    { lockableId : Api.ScalarCodecs.Id
    , lockReason : OptionalArgument Api.Enum.LockReason.LockReason
    , clientMutationId : OptionalArgument String
    }


{-| Encode a LockLockableInput into a value that can be used as an argument.
-}
encodeLockLockableInput : LockLockableInput -> Value
encodeLockLockableInput input =
    Encode.maybeObject
        [ ( "lockableId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.lockableId |> Just ), ( "lockReason", Encode.enum Api.Enum.LockReason.toString |> Encode.optional input.lockReason ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildMergeBranchInput : MergeBranchInputRequiredFields -> (MergeBranchInputOptionalFields -> MergeBranchInputOptionalFields) -> MergeBranchInput
buildMergeBranchInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { commitMessage = Absent, clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, base = required.base, head = required.head, commitMessage = optionals.commitMessage, clientMutationId = optionals.clientMutationId }


type alias MergeBranchInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id
    , base : String
    , head : String
    }


type alias MergeBranchInputOptionalFields =
    { commitMessage : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the MergeBranchInput input object.
-}
type alias MergeBranchInput =
    { repositoryId : Api.ScalarCodecs.Id
    , base : String
    , head : String
    , commitMessage : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MergeBranchInput into a value that can be used as an argument.
-}
encodeMergeBranchInput : MergeBranchInput -> Value
encodeMergeBranchInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "base", Encode.string input.base |> Just ), ( "head", Encode.string input.head |> Just ), ( "commitMessage", Encode.string |> Encode.optional input.commitMessage ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildMergePullRequestInput : MergePullRequestInputRequiredFields -> (MergePullRequestInputOptionalFields -> MergePullRequestInputOptionalFields) -> MergePullRequestInput
buildMergePullRequestInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { commitHeadline = Absent, commitBody = Absent, expectedHeadOid = Absent, mergeMethod = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required.pullRequestId, commitHeadline = optionals.commitHeadline, commitBody = optionals.commitBody, expectedHeadOid = optionals.expectedHeadOid, mergeMethod = optionals.mergeMethod, clientMutationId = optionals.clientMutationId }


type alias MergePullRequestInputRequiredFields =
    { pullRequestId : Api.ScalarCodecs.Id }


type alias MergePullRequestInputOptionalFields =
    { commitHeadline : OptionalArgument String
    , commitBody : OptionalArgument String
    , expectedHeadOid : OptionalArgument Api.ScalarCodecs.GitObjectID
    , mergeMethod : OptionalArgument Api.Enum.PullRequestMergeMethod.PullRequestMergeMethod
    , clientMutationId : OptionalArgument String
    }


{-| Type for the MergePullRequestInput input object.
-}
type alias MergePullRequestInput =
    { pullRequestId : Api.ScalarCodecs.Id
    , commitHeadline : OptionalArgument String
    , commitBody : OptionalArgument String
    , expectedHeadOid : OptionalArgument Api.ScalarCodecs.GitObjectID
    , mergeMethod : OptionalArgument Api.Enum.PullRequestMergeMethod.PullRequestMergeMethod
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MergePullRequestInput into a value that can be used as an argument.
-}
encodeMergePullRequestInput : MergePullRequestInput -> Value
encodeMergePullRequestInput input =
    Encode.maybeObject
        [ ( "pullRequestId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.pullRequestId |> Just ), ( "commitHeadline", Encode.string |> Encode.optional input.commitHeadline ), ( "commitBody", Encode.string |> Encode.optional input.commitBody ), ( "expectedHeadOid", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input.expectedHeadOid ), ( "mergeMethod", Encode.enum Api.Enum.PullRequestMergeMethod.toString |> Encode.optional input.mergeMethod ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildMilestoneOrder : MilestoneOrderRequiredFields -> MilestoneOrder
buildMilestoneOrder required =
    { field = required.field, direction = required.direction }


type alias MilestoneOrderRequiredFields =
    { field : Api.Enum.MilestoneOrderField.MilestoneOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the MilestoneOrder input object.
-}
type alias MilestoneOrder =
    { field : Api.Enum.MilestoneOrderField.MilestoneOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a MilestoneOrder into a value that can be used as an argument.
-}
encodeMilestoneOrder : MilestoneOrder -> Value
encodeMilestoneOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.MilestoneOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildMoveProjectCardInput : MoveProjectCardInputRequiredFields -> (MoveProjectCardInputOptionalFields -> MoveProjectCardInputOptionalFields) -> MoveProjectCardInput
buildMoveProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { afterCardId = Absent, clientMutationId = Absent }
    in
    { cardId = required.cardId, columnId = required.columnId, afterCardId = optionals.afterCardId, clientMutationId = optionals.clientMutationId }


type alias MoveProjectCardInputRequiredFields =
    { cardId : Api.ScalarCodecs.Id
    , columnId : Api.ScalarCodecs.Id
    }


type alias MoveProjectCardInputOptionalFields =
    { afterCardId : OptionalArgument Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the MoveProjectCardInput input object.
-}
type alias MoveProjectCardInput =
    { cardId : Api.ScalarCodecs.Id
    , columnId : Api.ScalarCodecs.Id
    , afterCardId : OptionalArgument Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MoveProjectCardInput into a value that can be used as an argument.
-}
encodeMoveProjectCardInput : MoveProjectCardInput -> Value
encodeMoveProjectCardInput input =
    Encode.maybeObject
        [ ( "cardId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.cardId |> Just ), ( "columnId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.columnId |> Just ), ( "afterCardId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.afterCardId ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildMoveProjectColumnInput : MoveProjectColumnInputRequiredFields -> (MoveProjectColumnInputOptionalFields -> MoveProjectColumnInputOptionalFields) -> MoveProjectColumnInput
buildMoveProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { afterColumnId = Absent, clientMutationId = Absent }
    in
    { columnId = required.columnId, afterColumnId = optionals.afterColumnId, clientMutationId = optionals.clientMutationId }


type alias MoveProjectColumnInputRequiredFields =
    { columnId : Api.ScalarCodecs.Id }


type alias MoveProjectColumnInputOptionalFields =
    { afterColumnId : OptionalArgument Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the MoveProjectColumnInput input object.
-}
type alias MoveProjectColumnInput =
    { columnId : Api.ScalarCodecs.Id
    , afterColumnId : OptionalArgument Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MoveProjectColumnInput into a value that can be used as an argument.
-}
encodeMoveProjectColumnInput : MoveProjectColumnInput -> Value
encodeMoveProjectColumnInput input =
    Encode.maybeObject
        [ ( "columnId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.columnId |> Just ), ( "afterColumnId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.afterColumnId ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildOrganizationOrder : OrganizationOrderRequiredFields -> OrganizationOrder
buildOrganizationOrder required =
    { field = required.field, direction = required.direction }


type alias OrganizationOrderRequiredFields =
    { field : Api.Enum.OrganizationOrderField.OrganizationOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the OrganizationOrder input object.
-}
type alias OrganizationOrder =
    { field : Api.Enum.OrganizationOrderField.OrganizationOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a OrganizationOrder into a value that can be used as an argument.
-}
encodeOrganizationOrder : OrganizationOrder -> Value
encodeOrganizationOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.OrganizationOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildProjectOrder : ProjectOrderRequiredFields -> ProjectOrder
buildProjectOrder required =
    { field = required.field, direction = required.direction }


type alias ProjectOrderRequiredFields =
    { field : Api.Enum.ProjectOrderField.ProjectOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ProjectOrder input object.
-}
type alias ProjectOrder =
    { field : Api.Enum.ProjectOrderField.ProjectOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ProjectOrder into a value that can be used as an argument.
-}
encodeProjectOrder : ProjectOrder -> Value
encodeProjectOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.ProjectOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildPullRequestOrder : PullRequestOrderRequiredFields -> PullRequestOrder
buildPullRequestOrder required =
    { field = required.field, direction = required.direction }


type alias PullRequestOrderRequiredFields =
    { field : Api.Enum.PullRequestOrderField.PullRequestOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the PullRequestOrder input object.
-}
type alias PullRequestOrder =
    { field : Api.Enum.PullRequestOrderField.PullRequestOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a PullRequestOrder into a value that can be used as an argument.
-}
encodePullRequestOrder : PullRequestOrder -> Value
encodePullRequestOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.PullRequestOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildReactionOrder : ReactionOrderRequiredFields -> ReactionOrder
buildReactionOrder required =
    { field = required.field, direction = required.direction }


type alias ReactionOrderRequiredFields =
    { field : Api.Enum.ReactionOrderField.ReactionOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ReactionOrder input object.
-}
type alias ReactionOrder =
    { field : Api.Enum.ReactionOrderField.ReactionOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ReactionOrder into a value that can be used as an argument.
-}
encodeReactionOrder : ReactionOrder -> Value
encodeReactionOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.ReactionOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRefOrder : RefOrderRequiredFields -> RefOrder
buildRefOrder required =
    { field = required.field, direction = required.direction }


type alias RefOrderRequiredFields =
    { field : Api.Enum.RefOrderField.RefOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the RefOrder input object.
-}
type alias RefOrder =
    { field : Api.Enum.RefOrderField.RefOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a RefOrder into a value that can be used as an argument.
-}
encodeRefOrder : RefOrder -> Value
encodeRefOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.RefOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRegenerateEnterpriseIdentityProviderRecoveryCodesInput : RegenerateEnterpriseIdentityProviderRecoveryCodesInputRequiredFields -> (RegenerateEnterpriseIdentityProviderRecoveryCodesInputOptionalFields -> RegenerateEnterpriseIdentityProviderRecoveryCodesInputOptionalFields) -> RegenerateEnterpriseIdentityProviderRecoveryCodesInput
buildRegenerateEnterpriseIdentityProviderRecoveryCodesInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, clientMutationId = optionals.clientMutationId }


type alias RegenerateEnterpriseIdentityProviderRecoveryCodesInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id }


type alias RegenerateEnterpriseIdentityProviderRecoveryCodesInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RegenerateEnterpriseIdentityProviderRecoveryCodesInput input object.
-}
type alias RegenerateEnterpriseIdentityProviderRecoveryCodesInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RegenerateEnterpriseIdentityProviderRecoveryCodesInput into a value that can be used as an argument.
-}
encodeRegenerateEnterpriseIdentityProviderRecoveryCodesInput : RegenerateEnterpriseIdentityProviderRecoveryCodesInput -> Value
encodeRegenerateEnterpriseIdentityProviderRecoveryCodesInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRegistryPackageMetadatum : RegistryPackageMetadatumRequiredFields -> (RegistryPackageMetadatumOptionalFields -> RegistryPackageMetadatumOptionalFields) -> RegistryPackageMetadatum
buildRegistryPackageMetadatum required fillOptionals =
    let
        optionals =
            fillOptionals
                { update = Absent }
    in
    { name = required.name, value = required.value, update = optionals.update }


type alias RegistryPackageMetadatumRequiredFields =
    { name : String
    , value : String
    }


type alias RegistryPackageMetadatumOptionalFields =
    { update : OptionalArgument Bool }


{-| Type for the RegistryPackageMetadatum input object.
-}
type alias RegistryPackageMetadatum =
    { name : String
    , value : String
    , update : OptionalArgument Bool
    }


{-| Encode a RegistryPackageMetadatum into a value that can be used as an argument.
-}
encodeRegistryPackageMetadatum : RegistryPackageMetadatum -> Value
encodeRegistryPackageMetadatum input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "value", Encode.string input.value |> Just ), ( "update", Encode.bool |> Encode.optional input.update ) ]


buildReleaseOrder : ReleaseOrderRequiredFields -> ReleaseOrder
buildReleaseOrder required =
    { field = required.field, direction = required.direction }


type alias ReleaseOrderRequiredFields =
    { field : Api.Enum.ReleaseOrderField.ReleaseOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ReleaseOrder input object.
-}
type alias ReleaseOrder =
    { field : Api.Enum.ReleaseOrderField.ReleaseOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ReleaseOrder into a value that can be used as an argument.
-}
encodeReleaseOrder : ReleaseOrder -> Value
encodeReleaseOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.ReleaseOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRemoveAssigneesFromAssignableInput : RemoveAssigneesFromAssignableInputRequiredFields -> (RemoveAssigneesFromAssignableInputOptionalFields -> RemoveAssigneesFromAssignableInputOptionalFields) -> RemoveAssigneesFromAssignableInput
buildRemoveAssigneesFromAssignableInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { assignableId = required.assignableId, assigneeIds = required.assigneeIds, clientMutationId = optionals.clientMutationId }


type alias RemoveAssigneesFromAssignableInputRequiredFields =
    { assignableId : Api.ScalarCodecs.Id
    , assigneeIds : List Api.ScalarCodecs.Id
    }


type alias RemoveAssigneesFromAssignableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveAssigneesFromAssignableInput input object.
-}
type alias RemoveAssigneesFromAssignableInput =
    { assignableId : Api.ScalarCodecs.Id
    , assigneeIds : List Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveAssigneesFromAssignableInput into a value that can be used as an argument.
-}
encodeRemoveAssigneesFromAssignableInput : RemoveAssigneesFromAssignableInput -> Value
encodeRemoveAssigneesFromAssignableInput input =
    Encode.maybeObject
        [ ( "assignableId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.assignableId |> Just ), ( "assigneeIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) input.assigneeIds |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveEnterpriseAdminInput : RemoveEnterpriseAdminInputRequiredFields -> (RemoveEnterpriseAdminInputOptionalFields -> RemoveEnterpriseAdminInputOptionalFields) -> RemoveEnterpriseAdminInput
buildRemoveEnterpriseAdminInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, login = required.login, clientMutationId = optionals.clientMutationId }


type alias RemoveEnterpriseAdminInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , login : String
    }


type alias RemoveEnterpriseAdminInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveEnterpriseAdminInput input object.
-}
type alias RemoveEnterpriseAdminInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , login : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveEnterpriseAdminInput into a value that can be used as an argument.
-}
encodeRemoveEnterpriseAdminInput : RemoveEnterpriseAdminInput -> Value
encodeRemoveEnterpriseAdminInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "login", Encode.string input.login |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveEnterpriseOrganizationInput : RemoveEnterpriseOrganizationInputRequiredFields -> (RemoveEnterpriseOrganizationInputOptionalFields -> RemoveEnterpriseOrganizationInputOptionalFields) -> RemoveEnterpriseOrganizationInput
buildRemoveEnterpriseOrganizationInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, organizationId = required.organizationId, clientMutationId = optionals.clientMutationId }


type alias RemoveEnterpriseOrganizationInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , organizationId : Api.ScalarCodecs.Id
    }


type alias RemoveEnterpriseOrganizationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveEnterpriseOrganizationInput input object.
-}
type alias RemoveEnterpriseOrganizationInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , organizationId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveEnterpriseOrganizationInput into a value that can be used as an argument.
-}
encodeRemoveEnterpriseOrganizationInput : RemoveEnterpriseOrganizationInput -> Value
encodeRemoveEnterpriseOrganizationInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "organizationId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.organizationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveLabelsFromLabelableInput : RemoveLabelsFromLabelableInputRequiredFields -> (RemoveLabelsFromLabelableInputOptionalFields -> RemoveLabelsFromLabelableInputOptionalFields) -> RemoveLabelsFromLabelableInput
buildRemoveLabelsFromLabelableInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { labelableId = required.labelableId, labelIds = required.labelIds, clientMutationId = optionals.clientMutationId }


type alias RemoveLabelsFromLabelableInputRequiredFields =
    { labelableId : Api.ScalarCodecs.Id
    , labelIds : List Api.ScalarCodecs.Id
    }


type alias RemoveLabelsFromLabelableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveLabelsFromLabelableInput input object.
-}
type alias RemoveLabelsFromLabelableInput =
    { labelableId : Api.ScalarCodecs.Id
    , labelIds : List Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveLabelsFromLabelableInput into a value that can be used as an argument.
-}
encodeRemoveLabelsFromLabelableInput : RemoveLabelsFromLabelableInput -> Value
encodeRemoveLabelsFromLabelableInput input =
    Encode.maybeObject
        [ ( "labelableId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.labelableId |> Just ), ( "labelIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) input.labelIds |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveOutsideCollaboratorInput : RemoveOutsideCollaboratorInputRequiredFields -> (RemoveOutsideCollaboratorInputOptionalFields -> RemoveOutsideCollaboratorInputOptionalFields) -> RemoveOutsideCollaboratorInput
buildRemoveOutsideCollaboratorInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { userId = required.userId, organizationId = required.organizationId, clientMutationId = optionals.clientMutationId }


type alias RemoveOutsideCollaboratorInputRequiredFields =
    { userId : Api.ScalarCodecs.Id
    , organizationId : Api.ScalarCodecs.Id
    }


type alias RemoveOutsideCollaboratorInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveOutsideCollaboratorInput input object.
-}
type alias RemoveOutsideCollaboratorInput =
    { userId : Api.ScalarCodecs.Id
    , organizationId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveOutsideCollaboratorInput into a value that can be used as an argument.
-}
encodeRemoveOutsideCollaboratorInput : RemoveOutsideCollaboratorInput -> Value
encodeRemoveOutsideCollaboratorInput input =
    Encode.maybeObject
        [ ( "userId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.userId |> Just ), ( "organizationId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.organizationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveReactionInput : RemoveReactionInputRequiredFields -> (RemoveReactionInputOptionalFields -> RemoveReactionInputOptionalFields) -> RemoveReactionInput
buildRemoveReactionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { subjectId = required.subjectId, content = required.content, clientMutationId = optionals.clientMutationId }


type alias RemoveReactionInputRequiredFields =
    { subjectId : Api.ScalarCodecs.Id
    , content : Api.Enum.ReactionContent.ReactionContent
    }


type alias RemoveReactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveReactionInput input object.
-}
type alias RemoveReactionInput =
    { subjectId : Api.ScalarCodecs.Id
    , content : Api.Enum.ReactionContent.ReactionContent
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveReactionInput into a value that can be used as an argument.
-}
encodeRemoveReactionInput : RemoveReactionInput -> Value
encodeRemoveReactionInput input =
    Encode.maybeObject
        [ ( "subjectId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "content", Encode.enum Api.Enum.ReactionContent.toString input.content |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRemoveStarInput : RemoveStarInputRequiredFields -> (RemoveStarInputOptionalFields -> RemoveStarInputOptionalFields) -> RemoveStarInput
buildRemoveStarInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { starrableId = required.starrableId, clientMutationId = optionals.clientMutationId }


type alias RemoveStarInputRequiredFields =
    { starrableId : Api.ScalarCodecs.Id }


type alias RemoveStarInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveStarInput input object.
-}
type alias RemoveStarInput =
    { starrableId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveStarInput into a value that can be used as an argument.
-}
encodeRemoveStarInput : RemoveStarInput -> Value
encodeRemoveStarInput input =
    Encode.maybeObject
        [ ( "starrableId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.starrableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildReopenIssueInput : ReopenIssueInputRequiredFields -> (ReopenIssueInputOptionalFields -> ReopenIssueInputOptionalFields) -> ReopenIssueInput
buildReopenIssueInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { issueId = required.issueId, clientMutationId = optionals.clientMutationId }


type alias ReopenIssueInputRequiredFields =
    { issueId : Api.ScalarCodecs.Id }


type alias ReopenIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ReopenIssueInput input object.
-}
type alias ReopenIssueInput =
    { issueId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ReopenIssueInput into a value that can be used as an argument.
-}
encodeReopenIssueInput : ReopenIssueInput -> Value
encodeReopenIssueInput input =
    Encode.maybeObject
        [ ( "issueId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.issueId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildReopenPullRequestInput : ReopenPullRequestInputRequiredFields -> (ReopenPullRequestInputOptionalFields -> ReopenPullRequestInputOptionalFields) -> ReopenPullRequestInput
buildReopenPullRequestInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { pullRequestId = required.pullRequestId, clientMutationId = optionals.clientMutationId }


type alias ReopenPullRequestInputRequiredFields =
    { pullRequestId : Api.ScalarCodecs.Id }


type alias ReopenPullRequestInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ReopenPullRequestInput input object.
-}
type alias ReopenPullRequestInput =
    { pullRequestId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ReopenPullRequestInput into a value that can be used as an argument.
-}
encodeReopenPullRequestInput : ReopenPullRequestInput -> Value
encodeReopenPullRequestInput input =
    Encode.maybeObject
        [ ( "pullRequestId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.pullRequestId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildRepositoryInvitationOrder : RepositoryInvitationOrderRequiredFields -> RepositoryInvitationOrder
buildRepositoryInvitationOrder required =
    { field = required.field, direction = required.direction }


type alias RepositoryInvitationOrderRequiredFields =
    { field : Api.Enum.RepositoryInvitationOrderField.RepositoryInvitationOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the RepositoryInvitationOrder input object.
-}
type alias RepositoryInvitationOrder =
    { field : Api.Enum.RepositoryInvitationOrderField.RepositoryInvitationOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a RepositoryInvitationOrder into a value that can be used as an argument.
-}
encodeRepositoryInvitationOrder : RepositoryInvitationOrder -> Value
encodeRepositoryInvitationOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.RepositoryInvitationOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRepositoryOrder : RepositoryOrderRequiredFields -> RepositoryOrder
buildRepositoryOrder required =
    { field = required.field, direction = required.direction }


type alias RepositoryOrderRequiredFields =
    { field : Api.Enum.RepositoryOrderField.RepositoryOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the RepositoryOrder input object.
-}
type alias RepositoryOrder =
    { field : Api.Enum.RepositoryOrderField.RepositoryOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a RepositoryOrder into a value that can be used as an argument.
-}
encodeRepositoryOrder : RepositoryOrder -> Value
encodeRepositoryOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.RepositoryOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRequestReviewsInput : RequestReviewsInputRequiredFields -> (RequestReviewsInputOptionalFields -> RequestReviewsInputOptionalFields) -> RequestReviewsInput
buildRequestReviewsInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { userIds = Absent, teamIds = Absent, union = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required.pullRequestId, userIds = optionals.userIds, teamIds = optionals.teamIds, union = optionals.union, clientMutationId = optionals.clientMutationId }


type alias RequestReviewsInputRequiredFields =
    { pullRequestId : Api.ScalarCodecs.Id }


type alias RequestReviewsInputOptionalFields =
    { userIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , teamIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , union : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the RequestReviewsInput input object.
-}
type alias RequestReviewsInput =
    { pullRequestId : Api.ScalarCodecs.Id
    , userIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , teamIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , union : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RequestReviewsInput into a value that can be used as an argument.
-}
encodeRequestReviewsInput : RequestReviewsInput -> Value
encodeRequestReviewsInput input =
    Encode.maybeObject
        [ ( "pullRequestId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.pullRequestId |> Just ), ( "userIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.userIds ), ( "teamIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.teamIds ), ( "union", Encode.bool |> Encode.optional input.union ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildResolveReviewThreadInput : ResolveReviewThreadInputRequiredFields -> (ResolveReviewThreadInputOptionalFields -> ResolveReviewThreadInputOptionalFields) -> ResolveReviewThreadInput
buildResolveReviewThreadInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { threadId = required.threadId, clientMutationId = optionals.clientMutationId }


type alias ResolveReviewThreadInputRequiredFields =
    { threadId : Api.ScalarCodecs.Id }


type alias ResolveReviewThreadInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ResolveReviewThreadInput input object.
-}
type alias ResolveReviewThreadInput =
    { threadId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ResolveReviewThreadInput into a value that can be used as an argument.
-}
encodeResolveReviewThreadInput : ResolveReviewThreadInput -> Value
encodeResolveReviewThreadInput input =
    Encode.maybeObject
        [ ( "threadId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.threadId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildSavedReplyOrder : SavedReplyOrderRequiredFields -> SavedReplyOrder
buildSavedReplyOrder required =
    { field = required.field, direction = required.direction }


type alias SavedReplyOrderRequiredFields =
    { field : Api.Enum.SavedReplyOrderField.SavedReplyOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SavedReplyOrder input object.
-}
type alias SavedReplyOrder =
    { field : Api.Enum.SavedReplyOrderField.SavedReplyOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SavedReplyOrder into a value that can be used as an argument.
-}
encodeSavedReplyOrder : SavedReplyOrder -> Value
encodeSavedReplyOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.SavedReplyOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildSecurityAdvisoryIdentifierFilter : SecurityAdvisoryIdentifierFilterRequiredFields -> SecurityAdvisoryIdentifierFilter
buildSecurityAdvisoryIdentifierFilter required =
    { type_ = required.type_, value = required.value }


type alias SecurityAdvisoryIdentifierFilterRequiredFields =
    { type_ : Api.Enum.SecurityAdvisoryIdentifierType.SecurityAdvisoryIdentifierType
    , value : String
    }


{-| Type for the SecurityAdvisoryIdentifierFilter input object.
-}
type alias SecurityAdvisoryIdentifierFilter =
    { type_ : Api.Enum.SecurityAdvisoryIdentifierType.SecurityAdvisoryIdentifierType
    , value : String
    }


{-| Encode a SecurityAdvisoryIdentifierFilter into a value that can be used as an argument.
-}
encodeSecurityAdvisoryIdentifierFilter : SecurityAdvisoryIdentifierFilter -> Value
encodeSecurityAdvisoryIdentifierFilter input =
    Encode.maybeObject
        [ ( "type", Encode.enum Api.Enum.SecurityAdvisoryIdentifierType.toString input.type_ |> Just ), ( "value", Encode.string input.value |> Just ) ]


buildSecurityAdvisoryOrder : SecurityAdvisoryOrderRequiredFields -> SecurityAdvisoryOrder
buildSecurityAdvisoryOrder required =
    { field = required.field, direction = required.direction }


type alias SecurityAdvisoryOrderRequiredFields =
    { field : Api.Enum.SecurityAdvisoryOrderField.SecurityAdvisoryOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SecurityAdvisoryOrder input object.
-}
type alias SecurityAdvisoryOrder =
    { field : Api.Enum.SecurityAdvisoryOrderField.SecurityAdvisoryOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SecurityAdvisoryOrder into a value that can be used as an argument.
-}
encodeSecurityAdvisoryOrder : SecurityAdvisoryOrder -> Value
encodeSecurityAdvisoryOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.SecurityAdvisoryOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildSecurityVulnerabilityOrder : SecurityVulnerabilityOrderRequiredFields -> SecurityVulnerabilityOrder
buildSecurityVulnerabilityOrder required =
    { field = required.field, direction = required.direction }


type alias SecurityVulnerabilityOrderRequiredFields =
    { field : Api.Enum.SecurityVulnerabilityOrderField.SecurityVulnerabilityOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SecurityVulnerabilityOrder input object.
-}
type alias SecurityVulnerabilityOrder =
    { field : Api.Enum.SecurityVulnerabilityOrderField.SecurityVulnerabilityOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SecurityVulnerabilityOrder into a value that can be used as an argument.
-}
encodeSecurityVulnerabilityOrder : SecurityVulnerabilityOrder -> Value
encodeSecurityVulnerabilityOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.SecurityVulnerabilityOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildSponsorsTierOrder : SponsorsTierOrderRequiredFields -> SponsorsTierOrder
buildSponsorsTierOrder required =
    { field = required.field, direction = required.direction }


type alias SponsorsTierOrderRequiredFields =
    { field : Api.Enum.SponsorsTierOrderField.SponsorsTierOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SponsorsTierOrder input object.
-}
type alias SponsorsTierOrder =
    { field : Api.Enum.SponsorsTierOrderField.SponsorsTierOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SponsorsTierOrder into a value that can be used as an argument.
-}
encodeSponsorsTierOrder : SponsorsTierOrder -> Value
encodeSponsorsTierOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.SponsorsTierOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildSponsorshipOrder : SponsorshipOrderRequiredFields -> SponsorshipOrder
buildSponsorshipOrder required =
    { field = required.field, direction = required.direction }


type alias SponsorshipOrderRequiredFields =
    { field : Api.Enum.SponsorshipOrderField.SponsorshipOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SponsorshipOrder input object.
-}
type alias SponsorshipOrder =
    { field : Api.Enum.SponsorshipOrderField.SponsorshipOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SponsorshipOrder into a value that can be used as an argument.
-}
encodeSponsorshipOrder : SponsorshipOrder -> Value
encodeSponsorshipOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.SponsorshipOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildStarOrder : StarOrderRequiredFields -> StarOrder
buildStarOrder required =
    { field = required.field, direction = required.direction }


type alias StarOrderRequiredFields =
    { field : Api.Enum.StarOrderField.StarOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the StarOrder input object.
-}
type alias StarOrder =
    { field : Api.Enum.StarOrderField.StarOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a StarOrder into a value that can be used as an argument.
-}
encodeStarOrder : StarOrder -> Value
encodeStarOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.StarOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildSubmitPullRequestReviewInput : SubmitPullRequestReviewInputRequiredFields -> (SubmitPullRequestReviewInputOptionalFields -> SubmitPullRequestReviewInputOptionalFields) -> SubmitPullRequestReviewInput
buildSubmitPullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { pullRequestId = Absent, pullRequestReviewId = Absent, body = Absent, clientMutationId = Absent }
    in
    { pullRequestId = optionals.pullRequestId, pullRequestReviewId = optionals.pullRequestReviewId, event = required.event, body = optionals.body, clientMutationId = optionals.clientMutationId }


type alias SubmitPullRequestReviewInputRequiredFields =
    { event : Api.Enum.PullRequestReviewEvent.PullRequestReviewEvent }


type alias SubmitPullRequestReviewInputOptionalFields =
    { pullRequestId : OptionalArgument Api.ScalarCodecs.Id
    , pullRequestReviewId : OptionalArgument Api.ScalarCodecs.Id
    , body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the SubmitPullRequestReviewInput input object.
-}
type alias SubmitPullRequestReviewInput =
    { pullRequestId : OptionalArgument Api.ScalarCodecs.Id
    , pullRequestReviewId : OptionalArgument Api.ScalarCodecs.Id
    , event : Api.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a SubmitPullRequestReviewInput into a value that can be used as an argument.
-}
encodeSubmitPullRequestReviewInput : SubmitPullRequestReviewInput -> Value
encodeSubmitPullRequestReviewInput input =
    Encode.maybeObject
        [ ( "pullRequestId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.pullRequestId ), ( "pullRequestReviewId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.pullRequestReviewId ), ( "event", Encode.enum Api.Enum.PullRequestReviewEvent.toString input.event |> Just ), ( "body", Encode.string |> Encode.optional input.body ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildTeamDiscussionCommentOrder : TeamDiscussionCommentOrderRequiredFields -> TeamDiscussionCommentOrder
buildTeamDiscussionCommentOrder required =
    { field = required.field, direction = required.direction }


type alias TeamDiscussionCommentOrderRequiredFields =
    { field : Api.Enum.TeamDiscussionCommentOrderField.TeamDiscussionCommentOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamDiscussionCommentOrder input object.
-}
type alias TeamDiscussionCommentOrder =
    { field : Api.Enum.TeamDiscussionCommentOrderField.TeamDiscussionCommentOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamDiscussionCommentOrder into a value that can be used as an argument.
-}
encodeTeamDiscussionCommentOrder : TeamDiscussionCommentOrder -> Value
encodeTeamDiscussionCommentOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.TeamDiscussionCommentOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildTeamDiscussionOrder : TeamDiscussionOrderRequiredFields -> TeamDiscussionOrder
buildTeamDiscussionOrder required =
    { field = required.field, direction = required.direction }


type alias TeamDiscussionOrderRequiredFields =
    { field : Api.Enum.TeamDiscussionOrderField.TeamDiscussionOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamDiscussionOrder input object.
-}
type alias TeamDiscussionOrder =
    { field : Api.Enum.TeamDiscussionOrderField.TeamDiscussionOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamDiscussionOrder into a value that can be used as an argument.
-}
encodeTeamDiscussionOrder : TeamDiscussionOrder -> Value
encodeTeamDiscussionOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.TeamDiscussionOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildTeamMemberOrder : TeamMemberOrderRequiredFields -> TeamMemberOrder
buildTeamMemberOrder required =
    { field = required.field, direction = required.direction }


type alias TeamMemberOrderRequiredFields =
    { field : Api.Enum.TeamMemberOrderField.TeamMemberOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamMemberOrder input object.
-}
type alias TeamMemberOrder =
    { field : Api.Enum.TeamMemberOrderField.TeamMemberOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamMemberOrder into a value that can be used as an argument.
-}
encodeTeamMemberOrder : TeamMemberOrder -> Value
encodeTeamMemberOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.TeamMemberOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildTeamOrder : TeamOrderRequiredFields -> TeamOrder
buildTeamOrder required =
    { field = required.field, direction = required.direction }


type alias TeamOrderRequiredFields =
    { field : Api.Enum.TeamOrderField.TeamOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamOrder input object.
-}
type alias TeamOrder =
    { field : Api.Enum.TeamOrderField.TeamOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamOrder into a value that can be used as an argument.
-}
encodeTeamOrder : TeamOrder -> Value
encodeTeamOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.TeamOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildTeamRepositoryOrder : TeamRepositoryOrderRequiredFields -> TeamRepositoryOrder
buildTeamRepositoryOrder required =
    { field = required.field, direction = required.direction }


type alias TeamRepositoryOrderRequiredFields =
    { field : Api.Enum.TeamRepositoryOrderField.TeamRepositoryOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamRepositoryOrder input object.
-}
type alias TeamRepositoryOrder =
    { field : Api.Enum.TeamRepositoryOrderField.TeamRepositoryOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamRepositoryOrder into a value that can be used as an argument.
-}
encodeTeamRepositoryOrder : TeamRepositoryOrder -> Value
encodeTeamRepositoryOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.TeamRepositoryOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]


buildTransferIssueInput : TransferIssueInputRequiredFields -> (TransferIssueInputOptionalFields -> TransferIssueInputOptionalFields) -> TransferIssueInput
buildTransferIssueInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { issueId = required.issueId, repositoryId = required.repositoryId, clientMutationId = optionals.clientMutationId }


type alias TransferIssueInputRequiredFields =
    { issueId : Api.ScalarCodecs.Id
    , repositoryId : Api.ScalarCodecs.Id
    }


type alias TransferIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the TransferIssueInput input object.
-}
type alias TransferIssueInput =
    { issueId : Api.ScalarCodecs.Id
    , repositoryId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a TransferIssueInput into a value that can be used as an argument.
-}
encodeTransferIssueInput : TransferIssueInput -> Value
encodeTransferIssueInput input =
    Encode.maybeObject
        [ ( "issueId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.issueId |> Just ), ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUnarchiveRepositoryInput : UnarchiveRepositoryInputRequiredFields -> (UnarchiveRepositoryInputOptionalFields -> UnarchiveRepositoryInputOptionalFields) -> UnarchiveRepositoryInput
buildUnarchiveRepositoryInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, clientMutationId = optionals.clientMutationId }


type alias UnarchiveRepositoryInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id }


type alias UnarchiveRepositoryInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnarchiveRepositoryInput input object.
-}
type alias UnarchiveRepositoryInput =
    { repositoryId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnarchiveRepositoryInput into a value that can be used as an argument.
-}
encodeUnarchiveRepositoryInput : UnarchiveRepositoryInput -> Value
encodeUnarchiveRepositoryInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUnfollowUserInput : UnfollowUserInputRequiredFields -> (UnfollowUserInputOptionalFields -> UnfollowUserInputOptionalFields) -> UnfollowUserInput
buildUnfollowUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { userId = required.userId, clientMutationId = optionals.clientMutationId }


type alias UnfollowUserInputRequiredFields =
    { userId : Api.ScalarCodecs.Id }


type alias UnfollowUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnfollowUserInput input object.
-}
type alias UnfollowUserInput =
    { userId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnfollowUserInput into a value that can be used as an argument.
-}
encodeUnfollowUserInput : UnfollowUserInput -> Value
encodeUnfollowUserInput input =
    Encode.maybeObject
        [ ( "userId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.userId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUnlinkRepositoryFromProjectInput : UnlinkRepositoryFromProjectInputRequiredFields -> (UnlinkRepositoryFromProjectInputOptionalFields -> UnlinkRepositoryFromProjectInputOptionalFields) -> UnlinkRepositoryFromProjectInput
buildUnlinkRepositoryFromProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { projectId = required.projectId, repositoryId = required.repositoryId, clientMutationId = optionals.clientMutationId }


type alias UnlinkRepositoryFromProjectInputRequiredFields =
    { projectId : Api.ScalarCodecs.Id
    , repositoryId : Api.ScalarCodecs.Id
    }


type alias UnlinkRepositoryFromProjectInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnlinkRepositoryFromProjectInput input object.
-}
type alias UnlinkRepositoryFromProjectInput =
    { projectId : Api.ScalarCodecs.Id
    , repositoryId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnlinkRepositoryFromProjectInput into a value that can be used as an argument.
-}
encodeUnlinkRepositoryFromProjectInput : UnlinkRepositoryFromProjectInput -> Value
encodeUnlinkRepositoryFromProjectInput input =
    Encode.maybeObject
        [ ( "projectId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.projectId |> Just ), ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUnlockLockableInput : UnlockLockableInputRequiredFields -> (UnlockLockableInputOptionalFields -> UnlockLockableInputOptionalFields) -> UnlockLockableInput
buildUnlockLockableInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { lockableId = required.lockableId, clientMutationId = optionals.clientMutationId }


type alias UnlockLockableInputRequiredFields =
    { lockableId : Api.ScalarCodecs.Id }


type alias UnlockLockableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnlockLockableInput input object.
-}
type alias UnlockLockableInput =
    { lockableId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnlockLockableInput into a value that can be used as an argument.
-}
encodeUnlockLockableInput : UnlockLockableInput -> Value
encodeUnlockLockableInput input =
    Encode.maybeObject
        [ ( "lockableId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.lockableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUnmarkIssueAsDuplicateInput : UnmarkIssueAsDuplicateInputRequiredFields -> (UnmarkIssueAsDuplicateInputOptionalFields -> UnmarkIssueAsDuplicateInputOptionalFields) -> UnmarkIssueAsDuplicateInput
buildUnmarkIssueAsDuplicateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { duplicateId = required.duplicateId, canonicalId = required.canonicalId, clientMutationId = optionals.clientMutationId }


type alias UnmarkIssueAsDuplicateInputRequiredFields =
    { duplicateId : Api.ScalarCodecs.Id
    , canonicalId : Api.ScalarCodecs.Id
    }


type alias UnmarkIssueAsDuplicateInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnmarkIssueAsDuplicateInput input object.
-}
type alias UnmarkIssueAsDuplicateInput =
    { duplicateId : Api.ScalarCodecs.Id
    , canonicalId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnmarkIssueAsDuplicateInput into a value that can be used as an argument.
-}
encodeUnmarkIssueAsDuplicateInput : UnmarkIssueAsDuplicateInput -> Value
encodeUnmarkIssueAsDuplicateInput input =
    Encode.maybeObject
        [ ( "duplicateId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.duplicateId |> Just ), ( "canonicalId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.canonicalId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUnresolveReviewThreadInput : UnresolveReviewThreadInputRequiredFields -> (UnresolveReviewThreadInputOptionalFields -> UnresolveReviewThreadInputOptionalFields) -> UnresolveReviewThreadInput
buildUnresolveReviewThreadInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { threadId = required.threadId, clientMutationId = optionals.clientMutationId }


type alias UnresolveReviewThreadInputRequiredFields =
    { threadId : Api.ScalarCodecs.Id }


type alias UnresolveReviewThreadInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnresolveReviewThreadInput input object.
-}
type alias UnresolveReviewThreadInput =
    { threadId : Api.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnresolveReviewThreadInput into a value that can be used as an argument.
-}
encodeUnresolveReviewThreadInput : UnresolveReviewThreadInput -> Value
encodeUnresolveReviewThreadInput input =
    Encode.maybeObject
        [ ( "threadId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.threadId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateBranchProtectionRuleInput : UpdateBranchProtectionRuleInputRequiredFields -> (UpdateBranchProtectionRuleInputOptionalFields -> UpdateBranchProtectionRuleInputOptionalFields) -> UpdateBranchProtectionRuleInput
buildUpdateBranchProtectionRuleInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { pattern = Absent, requiresApprovingReviews = Absent, requiredApprovingReviewCount = Absent, requiresCommitSignatures = Absent, isAdminEnforced = Absent, requiresStatusChecks = Absent, requiresStrictStatusChecks = Absent, requiresCodeOwnerReviews = Absent, dismissesStaleReviews = Absent, restrictsReviewDismissals = Absent, reviewDismissalActorIds = Absent, restrictsPushes = Absent, pushActorIds = Absent, requiredStatusCheckContexts = Absent, clientMutationId = Absent }
    in
    { branchProtectionRuleId = required.branchProtectionRuleId, pattern = optionals.pattern, requiresApprovingReviews = optionals.requiresApprovingReviews, requiredApprovingReviewCount = optionals.requiredApprovingReviewCount, requiresCommitSignatures = optionals.requiresCommitSignatures, isAdminEnforced = optionals.isAdminEnforced, requiresStatusChecks = optionals.requiresStatusChecks, requiresStrictStatusChecks = optionals.requiresStrictStatusChecks, requiresCodeOwnerReviews = optionals.requiresCodeOwnerReviews, dismissesStaleReviews = optionals.dismissesStaleReviews, restrictsReviewDismissals = optionals.restrictsReviewDismissals, reviewDismissalActorIds = optionals.reviewDismissalActorIds, restrictsPushes = optionals.restrictsPushes, pushActorIds = optionals.pushActorIds, requiredStatusCheckContexts = optionals.requiredStatusCheckContexts, clientMutationId = optionals.clientMutationId }


type alias UpdateBranchProtectionRuleInputRequiredFields =
    { branchProtectionRuleId : Api.ScalarCodecs.Id }


type alias UpdateBranchProtectionRuleInputOptionalFields =
    { pattern : OptionalArgument String
    , requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateBranchProtectionRuleInput input object.
-}
type alias UpdateBranchProtectionRuleInput =
    { branchProtectionRuleId : Api.ScalarCodecs.Id
    , pattern : OptionalArgument String
    , requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBranchProtectionRuleInput into a value that can be used as an argument.
-}
encodeUpdateBranchProtectionRuleInput : UpdateBranchProtectionRuleInput -> Value
encodeUpdateBranchProtectionRuleInput input =
    Encode.maybeObject
        [ ( "branchProtectionRuleId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.branchProtectionRuleId |> Just ), ( "pattern", Encode.string |> Encode.optional input.pattern ), ( "requiresApprovingReviews", Encode.bool |> Encode.optional input.requiresApprovingReviews ), ( "requiredApprovingReviewCount", Encode.int |> Encode.optional input.requiredApprovingReviewCount ), ( "requiresCommitSignatures", Encode.bool |> Encode.optional input.requiresCommitSignatures ), ( "isAdminEnforced", Encode.bool |> Encode.optional input.isAdminEnforced ), ( "requiresStatusChecks", Encode.bool |> Encode.optional input.requiresStatusChecks ), ( "requiresStrictStatusChecks", Encode.bool |> Encode.optional input.requiresStrictStatusChecks ), ( "requiresCodeOwnerReviews", Encode.bool |> Encode.optional input.requiresCodeOwnerReviews ), ( "dismissesStaleReviews", Encode.bool |> Encode.optional input.dismissesStaleReviews ), ( "restrictsReviewDismissals", Encode.bool |> Encode.optional input.restrictsReviewDismissals ), ( "reviewDismissalActorIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.reviewDismissalActorIds ), ( "restrictsPushes", Encode.bool |> Encode.optional input.restrictsPushes ), ( "pushActorIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.pushActorIds ), ( "requiredStatusCheckContexts", (Encode.string |> Encode.list) |> Encode.optional input.requiredStatusCheckContexts ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseActionExecutionCapabilitySettingInput : UpdateEnterpriseActionExecutionCapabilitySettingInputRequiredFields -> (UpdateEnterpriseActionExecutionCapabilitySettingInputOptionalFields -> UpdateEnterpriseActionExecutionCapabilitySettingInputOptionalFields) -> UpdateEnterpriseActionExecutionCapabilitySettingInput
buildUpdateEnterpriseActionExecutionCapabilitySettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, capability = required.capability, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseActionExecutionCapabilitySettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , capability : Api.Enum.ActionExecutionCapabilitySetting.ActionExecutionCapabilitySetting
    }


type alias UpdateEnterpriseActionExecutionCapabilitySettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseActionExecutionCapabilitySettingInput input object.
-}
type alias UpdateEnterpriseActionExecutionCapabilitySettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , capability : Api.Enum.ActionExecutionCapabilitySetting.ActionExecutionCapabilitySetting
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseActionExecutionCapabilitySettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseActionExecutionCapabilitySettingInput : UpdateEnterpriseActionExecutionCapabilitySettingInput -> Value
encodeUpdateEnterpriseActionExecutionCapabilitySettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "capability", Encode.enum Api.Enum.ActionExecutionCapabilitySetting.toString input.capability |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseAdministratorRoleInput : UpdateEnterpriseAdministratorRoleInputRequiredFields -> (UpdateEnterpriseAdministratorRoleInputOptionalFields -> UpdateEnterpriseAdministratorRoleInputOptionalFields) -> UpdateEnterpriseAdministratorRoleInput
buildUpdateEnterpriseAdministratorRoleInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, login = required.login, role = required.role, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseAdministratorRoleInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , login : String
    , role : Api.Enum.EnterpriseAdministratorRole.EnterpriseAdministratorRole
    }


type alias UpdateEnterpriseAdministratorRoleInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseAdministratorRoleInput input object.
-}
type alias UpdateEnterpriseAdministratorRoleInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , login : String
    , role : Api.Enum.EnterpriseAdministratorRole.EnterpriseAdministratorRole
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseAdministratorRoleInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseAdministratorRoleInput : UpdateEnterpriseAdministratorRoleInput -> Value
encodeUpdateEnterpriseAdministratorRoleInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "login", Encode.string input.login |> Just ), ( "role", Encode.enum Api.Enum.EnterpriseAdministratorRole.toString input.role |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput : UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputRequiredFields -> (UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputOptionalFields -> UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputOptionalFields) -> UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput
buildUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput input object.
-}
type alias UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput : UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput -> Value
encodeUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledDisabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseDefaultRepositoryPermissionSettingInput : UpdateEnterpriseDefaultRepositoryPermissionSettingInputRequiredFields -> (UpdateEnterpriseDefaultRepositoryPermissionSettingInputOptionalFields -> UpdateEnterpriseDefaultRepositoryPermissionSettingInputOptionalFields) -> UpdateEnterpriseDefaultRepositoryPermissionSettingInput
buildUpdateEnterpriseDefaultRepositoryPermissionSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseDefaultRepositoryPermissionSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseDefaultRepositoryPermissionSettingValue.EnterpriseDefaultRepositoryPermissionSettingValue
    }


type alias UpdateEnterpriseDefaultRepositoryPermissionSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseDefaultRepositoryPermissionSettingInput input object.
-}
type alias UpdateEnterpriseDefaultRepositoryPermissionSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseDefaultRepositoryPermissionSettingValue.EnterpriseDefaultRepositoryPermissionSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseDefaultRepositoryPermissionSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseDefaultRepositoryPermissionSettingInput : UpdateEnterpriseDefaultRepositoryPermissionSettingInput -> Value
encodeUpdateEnterpriseDefaultRepositoryPermissionSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseDefaultRepositoryPermissionSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput : UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputRequiredFields -> (UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputOptionalFields -> UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputOptionalFields) -> UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput
buildUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput input object.
-}
type alias UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput : UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput -> Value
encodeUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledDisabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseMembersCanCreateRepositoriesSettingInput : UpdateEnterpriseMembersCanCreateRepositoriesSettingInputRequiredFields -> (UpdateEnterpriseMembersCanCreateRepositoriesSettingInputOptionalFields -> UpdateEnterpriseMembersCanCreateRepositoriesSettingInputOptionalFields) -> UpdateEnterpriseMembersCanCreateRepositoriesSettingInput
buildUpdateEnterpriseMembersCanCreateRepositoriesSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { settingValue = Absent, membersCanCreateRepositoriesPolicyEnabled = Absent, membersCanCreatePublicRepositories = Absent, membersCanCreatePrivateRepositories = Absent, membersCanCreateInternalRepositories = Absent, clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = optionals.settingValue, membersCanCreateRepositoriesPolicyEnabled = optionals.membersCanCreateRepositoriesPolicyEnabled, membersCanCreatePublicRepositories = optionals.membersCanCreatePublicRepositories, membersCanCreatePrivateRepositories = optionals.membersCanCreatePrivateRepositories, membersCanCreateInternalRepositories = optionals.membersCanCreateInternalRepositories, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseMembersCanCreateRepositoriesSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id }


type alias UpdateEnterpriseMembersCanCreateRepositoriesSettingInputOptionalFields =
    { settingValue : OptionalArgument Api.Enum.EnterpriseMembersCanCreateRepositoriesSettingValue.EnterpriseMembersCanCreateRepositoriesSettingValue
    , membersCanCreateRepositoriesPolicyEnabled : OptionalArgument Bool
    , membersCanCreatePublicRepositories : OptionalArgument Bool
    , membersCanCreatePrivateRepositories : OptionalArgument Bool
    , membersCanCreateInternalRepositories : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateEnterpriseMembersCanCreateRepositoriesSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanCreateRepositoriesSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : OptionalArgument Api.Enum.EnterpriseMembersCanCreateRepositoriesSettingValue.EnterpriseMembersCanCreateRepositoriesSettingValue
    , membersCanCreateRepositoriesPolicyEnabled : OptionalArgument Bool
    , membersCanCreatePublicRepositories : OptionalArgument Bool
    , membersCanCreatePrivateRepositories : OptionalArgument Bool
    , membersCanCreateInternalRepositories : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanCreateRepositoriesSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanCreateRepositoriesSettingInput : UpdateEnterpriseMembersCanCreateRepositoriesSettingInput -> Value
encodeUpdateEnterpriseMembersCanCreateRepositoriesSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseMembersCanCreateRepositoriesSettingValue.toString |> Encode.optional input.settingValue ), ( "membersCanCreateRepositoriesPolicyEnabled", Encode.bool |> Encode.optional input.membersCanCreateRepositoriesPolicyEnabled ), ( "membersCanCreatePublicRepositories", Encode.bool |> Encode.optional input.membersCanCreatePublicRepositories ), ( "membersCanCreatePrivateRepositories", Encode.bool |> Encode.optional input.membersCanCreatePrivateRepositories ), ( "membersCanCreateInternalRepositories", Encode.bool |> Encode.optional input.membersCanCreateInternalRepositories ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseMembersCanDeleteIssuesSettingInput : UpdateEnterpriseMembersCanDeleteIssuesSettingInputRequiredFields -> (UpdateEnterpriseMembersCanDeleteIssuesSettingInputOptionalFields -> UpdateEnterpriseMembersCanDeleteIssuesSettingInputOptionalFields) -> UpdateEnterpriseMembersCanDeleteIssuesSettingInput
buildUpdateEnterpriseMembersCanDeleteIssuesSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseMembersCanDeleteIssuesSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanDeleteIssuesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanDeleteIssuesSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanDeleteIssuesSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanDeleteIssuesSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanDeleteIssuesSettingInput : UpdateEnterpriseMembersCanDeleteIssuesSettingInput -> Value
encodeUpdateEnterpriseMembersCanDeleteIssuesSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledDisabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput : UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputRequiredFields -> (UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputOptionalFields -> UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputOptionalFields) -> UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput
buildUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput : UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput -> Value
encodeUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledDisabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput : UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputRequiredFields -> (UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputOptionalFields -> UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputOptionalFields) -> UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput
buildUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput : UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput -> Value
encodeUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledDisabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseMembersCanMakePurchasesSettingInput : UpdateEnterpriseMembersCanMakePurchasesSettingInputRequiredFields -> (UpdateEnterpriseMembersCanMakePurchasesSettingInputOptionalFields -> UpdateEnterpriseMembersCanMakePurchasesSettingInputOptionalFields) -> UpdateEnterpriseMembersCanMakePurchasesSettingInput
buildUpdateEnterpriseMembersCanMakePurchasesSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseMembersCanMakePurchasesSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseMembersCanMakePurchasesSettingValue.EnterpriseMembersCanMakePurchasesSettingValue
    }


type alias UpdateEnterpriseMembersCanMakePurchasesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanMakePurchasesSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanMakePurchasesSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseMembersCanMakePurchasesSettingValue.EnterpriseMembersCanMakePurchasesSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanMakePurchasesSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanMakePurchasesSettingInput : UpdateEnterpriseMembersCanMakePurchasesSettingInput -> Value
encodeUpdateEnterpriseMembersCanMakePurchasesSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseMembersCanMakePurchasesSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput : UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputRequiredFields -> (UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputOptionalFields -> UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputOptionalFields) -> UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput
buildUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput : UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput -> Value
encodeUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledDisabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput : UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputRequiredFields -> (UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputOptionalFields -> UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputOptionalFields) -> UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput
buildUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput : UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput -> Value
encodeUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledDisabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseOrganizationProjectsSettingInput : UpdateEnterpriseOrganizationProjectsSettingInputRequiredFields -> (UpdateEnterpriseOrganizationProjectsSettingInputOptionalFields -> UpdateEnterpriseOrganizationProjectsSettingInputOptionalFields) -> UpdateEnterpriseOrganizationProjectsSettingInput
buildUpdateEnterpriseOrganizationProjectsSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseOrganizationProjectsSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseOrganizationProjectsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseOrganizationProjectsSettingInput input object.
-}
type alias UpdateEnterpriseOrganizationProjectsSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseOrganizationProjectsSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseOrganizationProjectsSettingInput : UpdateEnterpriseOrganizationProjectsSettingInput -> Value
encodeUpdateEnterpriseOrganizationProjectsSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledDisabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseProfileInput : UpdateEnterpriseProfileInputRequiredFields -> (UpdateEnterpriseProfileInputOptionalFields -> UpdateEnterpriseProfileInputOptionalFields) -> UpdateEnterpriseProfileInput
buildUpdateEnterpriseProfileInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, description = Absent, websiteUrl = Absent, location = Absent, clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, name = optionals.name, description = optionals.description, websiteUrl = optionals.websiteUrl, location = optionals.location, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseProfileInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id }


type alias UpdateEnterpriseProfileInputOptionalFields =
    { name : OptionalArgument String
    , description : OptionalArgument String
    , websiteUrl : OptionalArgument String
    , location : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateEnterpriseProfileInput input object.
-}
type alias UpdateEnterpriseProfileInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , name : OptionalArgument String
    , description : OptionalArgument String
    , websiteUrl : OptionalArgument String
    , location : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseProfileInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseProfileInput : UpdateEnterpriseProfileInput -> Value
encodeUpdateEnterpriseProfileInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "websiteUrl", Encode.string |> Encode.optional input.websiteUrl ), ( "location", Encode.string |> Encode.optional input.location ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseRepositoryProjectsSettingInput : UpdateEnterpriseRepositoryProjectsSettingInputRequiredFields -> (UpdateEnterpriseRepositoryProjectsSettingInputOptionalFields -> UpdateEnterpriseRepositoryProjectsSettingInputOptionalFields) -> UpdateEnterpriseRepositoryProjectsSettingInput
buildUpdateEnterpriseRepositoryProjectsSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseRepositoryProjectsSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseRepositoryProjectsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseRepositoryProjectsSettingInput input object.
-}
type alias UpdateEnterpriseRepositoryProjectsSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseRepositoryProjectsSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseRepositoryProjectsSettingInput : UpdateEnterpriseRepositoryProjectsSettingInput -> Value
encodeUpdateEnterpriseRepositoryProjectsSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledDisabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseTeamDiscussionsSettingInput : UpdateEnterpriseTeamDiscussionsSettingInputRequiredFields -> (UpdateEnterpriseTeamDiscussionsSettingInputOptionalFields -> UpdateEnterpriseTeamDiscussionsSettingInputOptionalFields) -> UpdateEnterpriseTeamDiscussionsSettingInput
buildUpdateEnterpriseTeamDiscussionsSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseTeamDiscussionsSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseTeamDiscussionsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseTeamDiscussionsSettingInput input object.
-}
type alias UpdateEnterpriseTeamDiscussionsSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseTeamDiscussionsSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseTeamDiscussionsSettingInput : UpdateEnterpriseTeamDiscussionsSettingInput -> Value
encodeUpdateEnterpriseTeamDiscussionsSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledDisabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput : UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputRequiredFields -> (UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputOptionalFields -> UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputOptionalFields) -> UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput
buildUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { enterpriseId = required.enterpriseId, settingValue = required.settingValue, clientMutationId = optionals.clientMutationId }


type alias UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputRequiredFields =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledSettingValue.EnterpriseEnabledSettingValue
    }


type alias UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput input object.
-}
type alias UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput =
    { enterpriseId : Api.ScalarCodecs.Id
    , settingValue : Api.Enum.EnterpriseEnabledSettingValue.EnterpriseEnabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput : UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput -> Value
encodeUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput input =
    Encode.maybeObject
        [ ( "enterpriseId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.enterpriseId |> Just ), ( "settingValue", Encode.enum Api.Enum.EnterpriseEnabledSettingValue.toString input.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateIssueCommentInput : UpdateIssueCommentInputRequiredFields -> (UpdateIssueCommentInputOptionalFields -> UpdateIssueCommentInputOptionalFields) -> UpdateIssueCommentInput
buildUpdateIssueCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { id = required.id, body = required.body, clientMutationId = optionals.clientMutationId }


type alias UpdateIssueCommentInputRequiredFields =
    { id : Api.ScalarCodecs.Id
    , body : String
    }


type alias UpdateIssueCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateIssueCommentInput input object.
-}
type alias UpdateIssueCommentInput =
    { id : Api.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateIssueCommentInput into a value that can be used as an argument.
-}
encodeUpdateIssueCommentInput : UpdateIssueCommentInput -> Value
encodeUpdateIssueCommentInput input =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "body", Encode.string input.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateIssueInput : UpdateIssueInputRequiredFields -> (UpdateIssueInputOptionalFields -> UpdateIssueInputOptionalFields) -> UpdateIssueInput
buildUpdateIssueInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { title = Absent, body = Absent, assigneeIds = Absent, milestoneId = Absent, labelIds = Absent, state = Absent, projectIds = Absent, clientMutationId = Absent }
    in
    { id = required.id, title = optionals.title, body = optionals.body, assigneeIds = optionals.assigneeIds, milestoneId = optionals.milestoneId, labelIds = optionals.labelIds, state = optionals.state, projectIds = optionals.projectIds, clientMutationId = optionals.clientMutationId }


type alias UpdateIssueInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias UpdateIssueInputOptionalFields =
    { title : OptionalArgument String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Api.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , state : OptionalArgument Api.Enum.IssueState.IssueState
    , projectIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateIssueInput input object.
-}
type alias UpdateIssueInput =
    { id : Api.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Api.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , state : OptionalArgument Api.Enum.IssueState.IssueState
    , projectIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateIssueInput into a value that can be used as an argument.
-}
encodeUpdateIssueInput : UpdateIssueInput -> Value
encodeUpdateIssueInput input =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "title", Encode.string |> Encode.optional input.title ), ( "body", Encode.string |> Encode.optional input.body ), ( "assigneeIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.assigneeIds ), ( "milestoneId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.milestoneId ), ( "labelIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.labelIds ), ( "state", Encode.enum Api.Enum.IssueState.toString |> Encode.optional input.state ), ( "projectIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.projectIds ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateProjectCardInput : UpdateProjectCardInputRequiredFields -> (UpdateProjectCardInputOptionalFields -> UpdateProjectCardInputOptionalFields) -> UpdateProjectCardInput
buildUpdateProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { isArchived = Absent, note = Absent, clientMutationId = Absent }
    in
    { projectCardId = required.projectCardId, isArchived = optionals.isArchived, note = optionals.note, clientMutationId = optionals.clientMutationId }


type alias UpdateProjectCardInputRequiredFields =
    { projectCardId : Api.ScalarCodecs.Id }


type alias UpdateProjectCardInputOptionalFields =
    { isArchived : OptionalArgument Bool
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectCardInput input object.
-}
type alias UpdateProjectCardInput =
    { projectCardId : Api.ScalarCodecs.Id
    , isArchived : OptionalArgument Bool
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectCardInput into a value that can be used as an argument.
-}
encodeUpdateProjectCardInput : UpdateProjectCardInput -> Value
encodeUpdateProjectCardInput input =
    Encode.maybeObject
        [ ( "projectCardId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.projectCardId |> Just ), ( "isArchived", Encode.bool |> Encode.optional input.isArchived ), ( "note", Encode.string |> Encode.optional input.note ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateProjectColumnInput : UpdateProjectColumnInputRequiredFields -> (UpdateProjectColumnInputOptionalFields -> UpdateProjectColumnInputOptionalFields) -> UpdateProjectColumnInput
buildUpdateProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { projectColumnId = required.projectColumnId, name = required.name, clientMutationId = optionals.clientMutationId }


type alias UpdateProjectColumnInputRequiredFields =
    { projectColumnId : Api.ScalarCodecs.Id
    , name : String
    }


type alias UpdateProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateProjectColumnInput input object.
-}
type alias UpdateProjectColumnInput =
    { projectColumnId : Api.ScalarCodecs.Id
    , name : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectColumnInput into a value that can be used as an argument.
-}
encodeUpdateProjectColumnInput : UpdateProjectColumnInput -> Value
encodeUpdateProjectColumnInput input =
    Encode.maybeObject
        [ ( "projectColumnId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.projectColumnId |> Just ), ( "name", Encode.string input.name |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateProjectInput : UpdateProjectInputRequiredFields -> (UpdateProjectInputOptionalFields -> UpdateProjectInputOptionalFields) -> UpdateProjectInput
buildUpdateProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, body = Absent, state = Absent, public = Absent, clientMutationId = Absent }
    in
    { projectId = required.projectId, name = optionals.name, body = optionals.body, state = optionals.state, public = optionals.public, clientMutationId = optionals.clientMutationId }


type alias UpdateProjectInputRequiredFields =
    { projectId : Api.ScalarCodecs.Id }


type alias UpdateProjectInputOptionalFields =
    { name : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument Api.Enum.ProjectState.ProjectState
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectInput input object.
-}
type alias UpdateProjectInput =
    { projectId : Api.ScalarCodecs.Id
    , name : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument Api.Enum.ProjectState.ProjectState
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectInput into a value that can be used as an argument.
-}
encodeUpdateProjectInput : UpdateProjectInput -> Value
encodeUpdateProjectInput input =
    Encode.maybeObject
        [ ( "projectId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.projectId |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "body", Encode.string |> Encode.optional input.body ), ( "state", Encode.enum Api.Enum.ProjectState.toString |> Encode.optional input.state ), ( "public", Encode.bool |> Encode.optional input.public ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdatePullRequestInput : UpdatePullRequestInputRequiredFields -> (UpdatePullRequestInputOptionalFields -> UpdatePullRequestInputOptionalFields) -> UpdatePullRequestInput
buildUpdatePullRequestInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { baseRefName = Absent, title = Absent, body = Absent, state = Absent, maintainerCanModify = Absent, assigneeIds = Absent, milestoneId = Absent, labelIds = Absent, projectIds = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required.pullRequestId, baseRefName = optionals.baseRefName, title = optionals.title, body = optionals.body, state = optionals.state, maintainerCanModify = optionals.maintainerCanModify, assigneeIds = optionals.assigneeIds, milestoneId = optionals.milestoneId, labelIds = optionals.labelIds, projectIds = optionals.projectIds, clientMutationId = optionals.clientMutationId }


type alias UpdatePullRequestInputRequiredFields =
    { pullRequestId : Api.ScalarCodecs.Id }


type alias UpdatePullRequestInputOptionalFields =
    { baseRefName : OptionalArgument String
    , title : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument Api.Enum.PullRequestUpdateState.PullRequestUpdateState
    , maintainerCanModify : OptionalArgument Bool
    , assigneeIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Api.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , projectIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdatePullRequestInput input object.
-}
type alias UpdatePullRequestInput =
    { pullRequestId : Api.ScalarCodecs.Id
    , baseRefName : OptionalArgument String
    , title : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument Api.Enum.PullRequestUpdateState.PullRequestUpdateState
    , maintainerCanModify : OptionalArgument Bool
    , assigneeIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Api.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , projectIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdatePullRequestInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestInput : UpdatePullRequestInput -> Value
encodeUpdatePullRequestInput input =
    Encode.maybeObject
        [ ( "pullRequestId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.pullRequestId |> Just ), ( "baseRefName", Encode.string |> Encode.optional input.baseRefName ), ( "title", Encode.string |> Encode.optional input.title ), ( "body", Encode.string |> Encode.optional input.body ), ( "state", Encode.enum Api.Enum.PullRequestUpdateState.toString |> Encode.optional input.state ), ( "maintainerCanModify", Encode.bool |> Encode.optional input.maintainerCanModify ), ( "assigneeIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.assigneeIds ), ( "milestoneId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.milestoneId ), ( "labelIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.labelIds ), ( "projectIds", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.projectIds ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdatePullRequestReviewCommentInput : UpdatePullRequestReviewCommentInputRequiredFields -> (UpdatePullRequestReviewCommentInputOptionalFields -> UpdatePullRequestReviewCommentInputOptionalFields) -> UpdatePullRequestReviewCommentInput
buildUpdatePullRequestReviewCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { pullRequestReviewCommentId = required.pullRequestReviewCommentId, body = required.body, clientMutationId = optionals.clientMutationId }


type alias UpdatePullRequestReviewCommentInputRequiredFields =
    { pullRequestReviewCommentId : Api.ScalarCodecs.Id
    , body : String
    }


type alias UpdatePullRequestReviewCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdatePullRequestReviewCommentInput input object.
-}
type alias UpdatePullRequestReviewCommentInput =
    { pullRequestReviewCommentId : Api.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdatePullRequestReviewCommentInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestReviewCommentInput : UpdatePullRequestReviewCommentInput -> Value
encodeUpdatePullRequestReviewCommentInput input =
    Encode.maybeObject
        [ ( "pullRequestReviewCommentId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.pullRequestReviewCommentId |> Just ), ( "body", Encode.string input.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdatePullRequestReviewInput : UpdatePullRequestReviewInputRequiredFields -> (UpdatePullRequestReviewInputOptionalFields -> UpdatePullRequestReviewInputOptionalFields) -> UpdatePullRequestReviewInput
buildUpdatePullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { pullRequestReviewId = required.pullRequestReviewId, body = required.body, clientMutationId = optionals.clientMutationId }


type alias UpdatePullRequestReviewInputRequiredFields =
    { pullRequestReviewId : Api.ScalarCodecs.Id
    , body : String
    }


type alias UpdatePullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdatePullRequestReviewInput input object.
-}
type alias UpdatePullRequestReviewInput =
    { pullRequestReviewId : Api.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdatePullRequestReviewInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestReviewInput : UpdatePullRequestReviewInput -> Value
encodeUpdatePullRequestReviewInput input =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "body", Encode.string input.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateRefInput : UpdateRefInputRequiredFields -> (UpdateRefInputOptionalFields -> UpdateRefInputOptionalFields) -> UpdateRefInput
buildUpdateRefInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { force = Absent, clientMutationId = Absent }
    in
    { refId = required.refId, oid = required.oid, force = optionals.force, clientMutationId = optionals.clientMutationId }


type alias UpdateRefInputRequiredFields =
    { refId : Api.ScalarCodecs.Id
    , oid : Api.ScalarCodecs.GitObjectID
    }


type alias UpdateRefInputOptionalFields =
    { force : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateRefInput input object.
-}
type alias UpdateRefInput =
    { refId : Api.ScalarCodecs.Id
    , oid : Api.ScalarCodecs.GitObjectID
    , force : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateRefInput into a value that can be used as an argument.
-}
encodeUpdateRefInput : UpdateRefInput -> Value
encodeUpdateRefInput input =
    Encode.maybeObject
        [ ( "refId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.refId |> Just ), ( "oid", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecGitObjectID) input.oid |> Just ), ( "force", Encode.bool |> Encode.optional input.force ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateRepositoryInput : UpdateRepositoryInputRequiredFields -> (UpdateRepositoryInputOptionalFields -> UpdateRepositoryInputOptionalFields) -> UpdateRepositoryInput
buildUpdateRepositoryInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, description = Absent, template = Absent, homepageUrl = Absent, hasWikiEnabled = Absent, hasIssuesEnabled = Absent, hasProjectsEnabled = Absent, clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, name = optionals.name, description = optionals.description, template = optionals.template, homepageUrl = optionals.homepageUrl, hasWikiEnabled = optionals.hasWikiEnabled, hasIssuesEnabled = optionals.hasIssuesEnabled, hasProjectsEnabled = optionals.hasProjectsEnabled, clientMutationId = optionals.clientMutationId }


type alias UpdateRepositoryInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id }


type alias UpdateRepositoryInputOptionalFields =
    { name : OptionalArgument String
    , description : OptionalArgument String
    , template : OptionalArgument Bool
    , homepageUrl : OptionalArgument Api.ScalarCodecs.Uri
    , hasWikiEnabled : OptionalArgument Bool
    , hasIssuesEnabled : OptionalArgument Bool
    , hasProjectsEnabled : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateRepositoryInput input object.
-}
type alias UpdateRepositoryInput =
    { repositoryId : Api.ScalarCodecs.Id
    , name : OptionalArgument String
    , description : OptionalArgument String
    , template : OptionalArgument Bool
    , homepageUrl : OptionalArgument Api.ScalarCodecs.Uri
    , hasWikiEnabled : OptionalArgument Bool
    , hasIssuesEnabled : OptionalArgument Bool
    , hasProjectsEnabled : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateRepositoryInput into a value that can be used as an argument.
-}
encodeUpdateRepositoryInput : UpdateRepositoryInput -> Value
encodeUpdateRepositoryInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "template", Encode.bool |> Encode.optional input.template ), ( "homepageUrl", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUri) |> Encode.optional input.homepageUrl ), ( "hasWikiEnabled", Encode.bool |> Encode.optional input.hasWikiEnabled ), ( "hasIssuesEnabled", Encode.bool |> Encode.optional input.hasIssuesEnabled ), ( "hasProjectsEnabled", Encode.bool |> Encode.optional input.hasProjectsEnabled ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateSubscriptionInput : UpdateSubscriptionInputRequiredFields -> (UpdateSubscriptionInputOptionalFields -> UpdateSubscriptionInputOptionalFields) -> UpdateSubscriptionInput
buildUpdateSubscriptionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { subscribableId = required.subscribableId, state = required.state, clientMutationId = optionals.clientMutationId }


type alias UpdateSubscriptionInputRequiredFields =
    { subscribableId : Api.ScalarCodecs.Id
    , state : Api.Enum.SubscriptionState.SubscriptionState
    }


type alias UpdateSubscriptionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateSubscriptionInput input object.
-}
type alias UpdateSubscriptionInput =
    { subscribableId : Api.ScalarCodecs.Id
    , state : Api.Enum.SubscriptionState.SubscriptionState
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateSubscriptionInput into a value that can be used as an argument.
-}
encodeUpdateSubscriptionInput : UpdateSubscriptionInput -> Value
encodeUpdateSubscriptionInput input =
    Encode.maybeObject
        [ ( "subscribableId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.subscribableId |> Just ), ( "state", Encode.enum Api.Enum.SubscriptionState.toString input.state |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateTeamDiscussionCommentInput : UpdateTeamDiscussionCommentInputRequiredFields -> (UpdateTeamDiscussionCommentInputOptionalFields -> UpdateTeamDiscussionCommentInputOptionalFields) -> UpdateTeamDiscussionCommentInput
buildUpdateTeamDiscussionCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { bodyVersion = Absent, clientMutationId = Absent }
    in
    { id = required.id, body = required.body, bodyVersion = optionals.bodyVersion, clientMutationId = optionals.clientMutationId }


type alias UpdateTeamDiscussionCommentInputRequiredFields =
    { id : Api.ScalarCodecs.Id
    , body : String
    }


type alias UpdateTeamDiscussionCommentInputOptionalFields =
    { bodyVersion : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateTeamDiscussionCommentInput input object.
-}
type alias UpdateTeamDiscussionCommentInput =
    { id : Api.ScalarCodecs.Id
    , body : String
    , bodyVersion : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateTeamDiscussionCommentInput into a value that can be used as an argument.
-}
encodeUpdateTeamDiscussionCommentInput : UpdateTeamDiscussionCommentInput -> Value
encodeUpdateTeamDiscussionCommentInput input =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "body", Encode.string input.body |> Just ), ( "bodyVersion", Encode.string |> Encode.optional input.bodyVersion ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateTeamDiscussionInput : UpdateTeamDiscussionInputRequiredFields -> (UpdateTeamDiscussionInputOptionalFields -> UpdateTeamDiscussionInputOptionalFields) -> UpdateTeamDiscussionInput
buildUpdateTeamDiscussionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { title = Absent, body = Absent, bodyVersion = Absent, pinned = Absent, clientMutationId = Absent }
    in
    { id = required.id, title = optionals.title, body = optionals.body, bodyVersion = optionals.bodyVersion, pinned = optionals.pinned, clientMutationId = optionals.clientMutationId }


type alias UpdateTeamDiscussionInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias UpdateTeamDiscussionInputOptionalFields =
    { title : OptionalArgument String
    , body : OptionalArgument String
    , bodyVersion : OptionalArgument String
    , pinned : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateTeamDiscussionInput input object.
-}
type alias UpdateTeamDiscussionInput =
    { id : Api.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , bodyVersion : OptionalArgument String
    , pinned : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateTeamDiscussionInput into a value that can be used as an argument.
-}
encodeUpdateTeamDiscussionInput : UpdateTeamDiscussionInput -> Value
encodeUpdateTeamDiscussionInput input =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "title", Encode.string |> Encode.optional input.title ), ( "body", Encode.string |> Encode.optional input.body ), ( "bodyVersion", Encode.string |> Encode.optional input.bodyVersion ), ( "pinned", Encode.bool |> Encode.optional input.pinned ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUpdateTopicsInput : UpdateTopicsInputRequiredFields -> (UpdateTopicsInputOptionalFields -> UpdateTopicsInputOptionalFields) -> UpdateTopicsInput
buildUpdateTopicsInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { repositoryId = required.repositoryId, topicNames = required.topicNames, clientMutationId = optionals.clientMutationId }


type alias UpdateTopicsInputRequiredFields =
    { repositoryId : Api.ScalarCodecs.Id
    , topicNames : List String
    }


type alias UpdateTopicsInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateTopicsInput input object.
-}
type alias UpdateTopicsInput =
    { repositoryId : Api.ScalarCodecs.Id
    , topicNames : List String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateTopicsInput into a value that can be used as an argument.
-}
encodeUpdateTopicsInput : UpdateTopicsInput -> Value
encodeUpdateTopicsInput input =
    Encode.maybeObject
        [ ( "repositoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "topicNames", (Encode.string |> Encode.list) input.topicNames |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildUserStatusOrder : UserStatusOrderRequiredFields -> UserStatusOrder
buildUserStatusOrder required =
    { field = required.field, direction = required.direction }


type alias UserStatusOrderRequiredFields =
    { field : Api.Enum.UserStatusOrderField.UserStatusOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Type for the UserStatusOrder input object.
-}
type alias UserStatusOrder =
    { field : Api.Enum.UserStatusOrderField.UserStatusOrderField
    , direction : Api.Enum.OrderDirection.OrderDirection
    }


{-| Encode a UserStatusOrder into a value that can be used as an argument.
-}
encodeUserStatusOrder : UserStatusOrder -> Value
encodeUserStatusOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Api.Enum.UserStatusOrderField.toString input.field |> Just ), ( "direction", Encode.enum Api.Enum.OrderDirection.toString input.direction |> Just ) ]
