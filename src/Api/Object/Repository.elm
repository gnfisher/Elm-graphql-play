-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Repository exposing (AssignableUsersOptionalArguments, BranchProtectionRulesOptionalArguments, CollaboratorsOptionalArguments, CommitCommentsOptionalArguments, DeployKeysOptionalArguments, DeploymentsOptionalArguments, ForksOptionalArguments, IssueOrPullRequestRequiredArguments, IssueRequiredArguments, IssuesOptionalArguments, LabelRequiredArguments, LabelsOptionalArguments, LanguagesOptionalArguments, MentionableUsersOptionalArguments, MilestoneRequiredArguments, MilestonesOptionalArguments, ObjectOptionalArguments, ProjectRequiredArguments, ProjectsOptionalArguments, PullRequestRequiredArguments, PullRequestsOptionalArguments, RefRequiredArguments, RefsOptionalArguments, RefsRequiredArguments, RegistryPackagesForQueryOptionalArguments, RegistryPackagesOptionalArguments, ReleaseRequiredArguments, ReleasesOptionalArguments, RepositoryTopicsOptionalArguments, ShortDescriptionHTMLOptionalArguments, StargazersOptionalArguments, VulnerabilityAlertsOptionalArguments, WatchersOptionalArguments, assignableUsers, branchProtectionRules, codeOfConduct, collaborators, commitComments, createdAt, databaseId, defaultBranchRef, deleteBranchOnMerge, deployKeys, deployments, description, descriptionHTML, diskUsage, forkCount, forks, fundingLinks, hasIssuesEnabled, hasProjectsEnabled, hasWikiEnabled, homepageUrl, id, isArchived, isDisabled, isFork, isLocked, isMirror, isPrivate, isTemplate, issue, issueOrPullRequest, issues, label, labels, languages, licenseInfo, lockReason, mentionableUsers, mergeCommitAllowed, milestone, milestones, mirrorUrl, name, nameWithOwner, object, openGraphImageUrl, owner, parent, primaryLanguage, project, projects, projectsResourcePath, projectsUrl, pullRequest, pullRequests, pushedAt, rebaseMergeAllowed, ref, refs, registryPackages, registryPackagesForQuery, release, releases, repositoryTopics, resourcePath, shortDescriptionHTML, squashMergeAllowed, sshUrl, stargazers, tempCloneToken, templateRepository, updatedAt, url, usesCustomOpenGraphImage, viewerCanAdminister, viewerCanCreateProjects, viewerCanSubscribe, viewerCanUpdateTopics, viewerHasStarred, viewerPermission, viewerSubscription, vulnerabilityAlerts, watchers)

import Api.Enum.CollaboratorAffiliation
import Api.Enum.IssueState
import Api.Enum.MilestoneState
import Api.Enum.OrderDirection
import Api.Enum.ProjectState
import Api.Enum.PullRequestState
import Api.Enum.RegistryPackageType
import Api.Enum.RepositoryAffiliation
import Api.Enum.RepositoryLockReason
import Api.Enum.RepositoryPermission
import Api.Enum.RepositoryPrivacy
import Api.Enum.SubscriptionState
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias AssignableUsersOptionalArguments =
    { query : OptionalArgument String
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users that can be assigned to issues in this repository.

  - query - Filters users with query on user name and login
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
assignableUsers : (AssignableUsersOptionalArguments -> AssignableUsersOptionalArguments) -> SelectionSet decodesTo Api.Object.UserConnection -> SelectionSet decodesTo Api.Object.Repository
assignableUsers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { query = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "query" filledInOptionals.query Encode.string, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "assignableUsers" optionalArgs object_ identity


type alias BranchProtectionRulesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of branch protection rules for this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
branchProtectionRules : (BranchProtectionRulesOptionalArguments -> BranchProtectionRulesOptionalArguments) -> SelectionSet decodesTo Api.Object.BranchProtectionRuleConnection -> SelectionSet decodesTo Api.Object.Repository
branchProtectionRules fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "branchProtectionRules" optionalArgs object_ identity


{-| Returns the code of conduct for this repository
-}
codeOfConduct : SelectionSet decodesTo Api.Object.CodeOfConduct -> SelectionSet (Maybe decodesTo) Api.Object.Repository
codeOfConduct object_ =
    Object.selectionForCompositeField "codeOfConduct" [] object_ (identity >> Decode.nullable)


type alias CollaboratorsOptionalArguments =
    { affiliation : OptionalArgument Api.Enum.CollaboratorAffiliation.CollaboratorAffiliation
    , query : OptionalArgument String
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of collaborators associated with the repository.

  - affiliation - Collaborators affiliation level with a repository.
  - query - Filters users with query on user name and login
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
collaborators : (CollaboratorsOptionalArguments -> CollaboratorsOptionalArguments) -> SelectionSet decodesTo Api.Object.RepositoryCollaboratorConnection -> SelectionSet (Maybe decodesTo) Api.Object.Repository
collaborators fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { affiliation = Absent, query = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "affiliation" filledInOptionals.affiliation (Encode.enum Api.Enum.CollaboratorAffiliation.toString), Argument.optional "query" filledInOptionals.query Encode.string, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "collaborators" optionalArgs object_ (identity >> Decode.nullable)


type alias CommitCommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of commit comments associated with the repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
commitComments : (CommitCommentsOptionalArguments -> CommitCommentsOptionalArguments) -> SelectionSet decodesTo Api.Object.CommitCommentConnection -> SelectionSet decodesTo Api.Object.Repository
commitComments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "commitComments" optionalArgs object_ identity


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Repository
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Api.Object.Repository
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The Ref associated with the repository's default branch.
-}
defaultBranchRef : SelectionSet decodesTo Api.Object.Ref -> SelectionSet (Maybe decodesTo) Api.Object.Repository
defaultBranchRef object_ =
    Object.selectionForCompositeField "defaultBranchRef" [] object_ (identity >> Decode.nullable)


{-| Whether or not branches are automatically deleted when merged in this repository.
-}
deleteBranchOnMerge : SelectionSet Bool Api.Object.Repository
deleteBranchOnMerge =
    Object.selectionForField "Bool" "deleteBranchOnMerge" [] Decode.bool


type alias DeployKeysOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of deploy keys that are on this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
deployKeys : (DeployKeysOptionalArguments -> DeployKeysOptionalArguments) -> SelectionSet decodesTo Api.Object.DeployKeyConnection -> SelectionSet decodesTo Api.Object.Repository
deployKeys fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deployKeys" optionalArgs object_ identity


type alias DeploymentsOptionalArguments =
    { environments : OptionalArgument (List String)
    , orderBy : OptionalArgument Api.InputObject.DeploymentOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Deployments associated with the repository

  - environments - Environments to list deployments for
  - orderBy - Ordering options for deployments returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
deployments : (DeploymentsOptionalArguments -> DeploymentsOptionalArguments) -> SelectionSet decodesTo Api.Object.DeploymentConnection -> SelectionSet decodesTo Api.Object.Repository
deployments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { environments = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "environments" filledInOptionals.environments (Encode.string |> Encode.list), Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeDeploymentOrder, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deployments" optionalArgs object_ identity


{-| The description of the repository.
-}
description : SelectionSet (Maybe String) Api.Object.Repository
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| The description of the repository rendered to HTML.
-}
descriptionHTML : SelectionSet Api.ScalarCodecs.Html Api.Object.Repository
descriptionHTML =
    Object.selectionForField "ScalarCodecs.Html" "descriptionHTML" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| The number of kilobytes this repository occupies on disk.
-}
diskUsage : SelectionSet (Maybe Int) Api.Object.Repository
diskUsage =
    Object.selectionForField "(Maybe Int)" "diskUsage" [] (Decode.int |> Decode.nullable)


{-| Returns how many forks there are of this repository in the whole network.
-}
forkCount : SelectionSet Int Api.Object.Repository
forkCount =
    Object.selectionForField "Int" "forkCount" [] Decode.int


type alias ForksOptionalArguments =
    { privacy : OptionalArgument Api.Enum.RepositoryPrivacy.RepositoryPrivacy
    , orderBy : OptionalArgument Api.InputObject.RepositoryOrder
    , affiliations : OptionalArgument (List (Maybe Api.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , ownerAffiliations : OptionalArgument (List (Maybe Api.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , isLocked : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of direct forked repositories.

  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - affiliations - Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
  - ownerAffiliations - Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
forks : (ForksOptionalArguments -> ForksOptionalArguments) -> SelectionSet decodesTo Api.Object.RepositoryConnection -> SelectionSet decodesTo Api.Object.Repository
forks fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { privacy = Absent, orderBy = Absent, affiliations = Absent, ownerAffiliations = Absent, isLocked = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "privacy" filledInOptionals.privacy (Encode.enum Api.Enum.RepositoryPrivacy.toString), Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeRepositoryOrder, Argument.optional "affiliations" filledInOptionals.affiliations (Encode.enum Api.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "ownerAffiliations" filledInOptionals.ownerAffiliations (Encode.enum Api.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "isLocked" filledInOptionals.isLocked Encode.bool, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "forks" optionalArgs object_ identity


{-| The funding links for this repository
-}
fundingLinks : SelectionSet decodesTo Api.Object.FundingLink -> SelectionSet (List decodesTo) Api.Object.Repository
fundingLinks object_ =
    Object.selectionForCompositeField "fundingLinks" [] object_ (identity >> Decode.list)


{-| Indicates if the repository has issues feature enabled.
-}
hasIssuesEnabled : SelectionSet Bool Api.Object.Repository
hasIssuesEnabled =
    Object.selectionForField "Bool" "hasIssuesEnabled" [] Decode.bool


{-| Indicates if the repository has the Projects feature enabled.
-}
hasProjectsEnabled : SelectionSet Bool Api.Object.Repository
hasProjectsEnabled =
    Object.selectionForField "Bool" "hasProjectsEnabled" [] Decode.bool


{-| Indicates if the repository has wiki feature enabled.
-}
hasWikiEnabled : SelectionSet Bool Api.Object.Repository
hasWikiEnabled =
    Object.selectionForField "Bool" "hasWikiEnabled" [] Decode.bool


{-| The repository's URL.
-}
homepageUrl : SelectionSet (Maybe Api.ScalarCodecs.Uri) Api.Object.Repository
homepageUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "homepageUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


id : SelectionSet Api.ScalarCodecs.Id Api.Object.Repository
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Indicates if the repository is unmaintained.
-}
isArchived : SelectionSet Bool Api.Object.Repository
isArchived =
    Object.selectionForField "Bool" "isArchived" [] Decode.bool


{-| Returns whether or not this repository disabled.
-}
isDisabled : SelectionSet Bool Api.Object.Repository
isDisabled =
    Object.selectionForField "Bool" "isDisabled" [] Decode.bool


{-| Identifies if the repository is a fork.
-}
isFork : SelectionSet Bool Api.Object.Repository
isFork =
    Object.selectionForField "Bool" "isFork" [] Decode.bool


{-| Indicates if the repository has been locked or not.
-}
isLocked : SelectionSet Bool Api.Object.Repository
isLocked =
    Object.selectionForField "Bool" "isLocked" [] Decode.bool


{-| Identifies if the repository is a mirror.
-}
isMirror : SelectionSet Bool Api.Object.Repository
isMirror =
    Object.selectionForField "Bool" "isMirror" [] Decode.bool


{-| Identifies if the repository is private.
-}
isPrivate : SelectionSet Bool Api.Object.Repository
isPrivate =
    Object.selectionForField "Bool" "isPrivate" [] Decode.bool


{-| Identifies if the repository is a template that can be used to generate new repositories.
-}
isTemplate : SelectionSet Bool Api.Object.Repository
isTemplate =
    Object.selectionForField "Bool" "isTemplate" [] Decode.bool


type alias IssueRequiredArguments =
    { number : Int }


{-| Returns a single issue from the current repository by number.

  - number - The number for the issue to be returned.

-}
issue : IssueRequiredArguments -> SelectionSet decodesTo Api.Object.Issue -> SelectionSet (Maybe decodesTo) Api.Object.Repository
issue requiredArgs object_ =
    Object.selectionForCompositeField "issue" [ Argument.required "number" requiredArgs.number Encode.int ] object_ (identity >> Decode.nullable)


type alias IssueOrPullRequestRequiredArguments =
    { number : Int }


{-| Returns a single issue-like object from the current repository by number.

  - number - The number for the issue to be returned.

-}
issueOrPullRequest : IssueOrPullRequestRequiredArguments -> SelectionSet decodesTo Api.Union.IssueOrPullRequest -> SelectionSet (Maybe decodesTo) Api.Object.Repository
issueOrPullRequest requiredArgs object_ =
    Object.selectionForCompositeField "issueOrPullRequest" [ Argument.required "number" requiredArgs.number Encode.int ] object_ (identity >> Decode.nullable)


type alias IssuesOptionalArguments =
    { orderBy : OptionalArgument Api.InputObject.IssueOrder
    , labels : OptionalArgument (List String)
    , states : OptionalArgument (List Api.Enum.IssueState.IssueState)
    , filterBy : OptionalArgument Api.InputObject.IssueFilters
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of issues that have been opened in the repository.

  - orderBy - Ordering options for issues returned from the connection.
  - labels - A list of label names to filter the pull requests by.
  - states - A list of states to filter the issues by.
  - filterBy - Filtering options for issues returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
issues : (IssuesOptionalArguments -> IssuesOptionalArguments) -> SelectionSet decodesTo Api.Object.IssueConnection -> SelectionSet decodesTo Api.Object.Repository
issues fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { orderBy = Absent, labels = Absent, states = Absent, filterBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeIssueOrder, Argument.optional "labels" filledInOptionals.labels (Encode.string |> Encode.list), Argument.optional "states" filledInOptionals.states (Encode.enum Api.Enum.IssueState.toString |> Encode.list), Argument.optional "filterBy" filledInOptionals.filterBy Api.InputObject.encodeIssueFilters, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "issues" optionalArgs object_ identity


type alias LabelRequiredArguments =
    { name : String }


{-| Returns a single label by name

  - name - Label name

-}
label : LabelRequiredArguments -> SelectionSet decodesTo Api.Object.Label -> SelectionSet (Maybe decodesTo) Api.Object.Repository
label requiredArgs object_ =
    Object.selectionForCompositeField "label" [ Argument.required "name" requiredArgs.name Encode.string ] object_ (identity >> Decode.nullable)


type alias LabelsOptionalArguments =
    { orderBy : OptionalArgument Api.InputObject.LabelOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , query : OptionalArgument String
    }


{-| A list of labels associated with the repository.

  - orderBy - Ordering options for labels returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - query - If provided, searches labels by name and description.

-}
labels : (LabelsOptionalArguments -> LabelsOptionalArguments) -> SelectionSet decodesTo Api.Object.LabelConnection -> SelectionSet (Maybe decodesTo) Api.Object.Repository
labels fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent, query = Absent }

        optionalArgs =
            [ Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeLabelOrder, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "query" filledInOptionals.query Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "labels" optionalArgs object_ (identity >> Decode.nullable)


type alias LanguagesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.LanguageOrder
    }


{-| A list containing a breakdown of the language composition of the repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Order for connection

-}
languages : (LanguagesOptionalArguments -> LanguagesOptionalArguments) -> SelectionSet decodesTo Api.Object.LanguageConnection -> SelectionSet (Maybe decodesTo) Api.Object.Repository
languages fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeLanguageOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "languages" optionalArgs object_ (identity >> Decode.nullable)


{-| The license associated with the repository
-}
licenseInfo : SelectionSet decodesTo Api.Object.License -> SelectionSet (Maybe decodesTo) Api.Object.Repository
licenseInfo object_ =
    Object.selectionForCompositeField "licenseInfo" [] object_ (identity >> Decode.nullable)


{-| The reason the repository has been locked.
-}
lockReason : SelectionSet (Maybe Api.Enum.RepositoryLockReason.RepositoryLockReason) Api.Object.Repository
lockReason =
    Object.selectionForField "(Maybe Enum.RepositoryLockReason.RepositoryLockReason)" "lockReason" [] (Api.Enum.RepositoryLockReason.decoder |> Decode.nullable)


type alias MentionableUsersOptionalArguments =
    { query : OptionalArgument String
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of Users that can be mentioned in the context of the repository.

  - query - Filters users with query on user name and login
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
mentionableUsers : (MentionableUsersOptionalArguments -> MentionableUsersOptionalArguments) -> SelectionSet decodesTo Api.Object.UserConnection -> SelectionSet decodesTo Api.Object.Repository
mentionableUsers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { query = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "query" filledInOptionals.query Encode.string, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "mentionableUsers" optionalArgs object_ identity


{-| Whether or not PRs are merged with a merge commit on this repository.
-}
mergeCommitAllowed : SelectionSet Bool Api.Object.Repository
mergeCommitAllowed =
    Object.selectionForField "Bool" "mergeCommitAllowed" [] Decode.bool


type alias MilestoneRequiredArguments =
    { number : Int }


{-| Returns a single milestone from the current repository by number.

  - number - The number for the milestone to be returned.

-}
milestone : MilestoneRequiredArguments -> SelectionSet decodesTo Api.Object.Milestone -> SelectionSet (Maybe decodesTo) Api.Object.Repository
milestone requiredArgs object_ =
    Object.selectionForCompositeField "milestone" [ Argument.required "number" requiredArgs.number Encode.int ] object_ (identity >> Decode.nullable)


type alias MilestonesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , states : OptionalArgument (List Api.Enum.MilestoneState.MilestoneState)
    , orderBy : OptionalArgument Api.InputObject.MilestoneOrder
    }


{-| A list of milestones associated with the repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - states - Filter by the state of the milestones.
  - orderBy - Ordering options for milestones.

-}
milestones : (MilestonesOptionalArguments -> MilestonesOptionalArguments) -> SelectionSet decodesTo Api.Object.MilestoneConnection -> SelectionSet (Maybe decodesTo) Api.Object.Repository
milestones fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, states = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "states" filledInOptionals.states (Encode.enum Api.Enum.MilestoneState.toString |> Encode.list), Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeMilestoneOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "milestones" optionalArgs object_ (identity >> Decode.nullable)


{-| The repository's original mirror URL.
-}
mirrorUrl : SelectionSet (Maybe Api.ScalarCodecs.Uri) Api.Object.Repository
mirrorUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "mirrorUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


{-| The name of the repository.
-}
name : SelectionSet String Api.Object.Repository
name =
    Object.selectionForField "String" "name" [] Decode.string


{-| The repository's name with owner.
-}
nameWithOwner : SelectionSet String Api.Object.Repository
nameWithOwner =
    Object.selectionForField "String" "nameWithOwner" [] Decode.string


type alias ObjectOptionalArguments =
    { oid : OptionalArgument Api.ScalarCodecs.GitObjectID
    , expression : OptionalArgument String
    }


{-| A Git object in the repository

  - oid - The Git object ID
  - expression - A Git revision expression suitable for rev-parse

-}
object : (ObjectOptionalArguments -> ObjectOptionalArguments) -> SelectionSet decodesTo Api.Interface.GitObject -> SelectionSet (Maybe decodesTo) Api.Object.Repository
object fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { oid = Absent, expression = Absent }

        optionalArgs =
            [ Argument.optional "oid" filledInOptionals.oid (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecGitObjectID), Argument.optional "expression" filledInOptionals.expression Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "object" optionalArgs object_ (identity >> Decode.nullable)


{-| The image used to represent this repository in Open Graph data.
-}
openGraphImageUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Repository
openGraphImageUrl =
    Object.selectionForField "ScalarCodecs.Uri" "openGraphImageUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The User owner of the repository.
-}
owner : SelectionSet decodesTo Api.Interface.RepositoryOwner -> SelectionSet decodesTo Api.Object.Repository
owner object_ =
    Object.selectionForCompositeField "owner" [] object_ identity


{-| The repository parent, if this is a fork.
-}
parent : SelectionSet decodesTo Api.Object.Repository -> SelectionSet (Maybe decodesTo) Api.Object.Repository
parent object_ =
    Object.selectionForCompositeField "parent" [] object_ (identity >> Decode.nullable)


{-| The primary language of the repository's code.
-}
primaryLanguage : SelectionSet decodesTo Api.Object.Language -> SelectionSet (Maybe decodesTo) Api.Object.Repository
primaryLanguage object_ =
    Object.selectionForCompositeField "primaryLanguage" [] object_ (identity >> Decode.nullable)


type alias ProjectRequiredArguments =
    { number : Int }


{-| Find project by number.

  - number - The project number to find.

-}
project : ProjectRequiredArguments -> SelectionSet decodesTo Api.Object.Project -> SelectionSet (Maybe decodesTo) Api.Object.Repository
project requiredArgs object_ =
    Object.selectionForCompositeField "project" [ Argument.required "number" requiredArgs.number Encode.int ] object_ (identity >> Decode.nullable)


type alias ProjectsOptionalArguments =
    { orderBy : OptionalArgument Api.InputObject.ProjectOrder
    , search : OptionalArgument String
    , states : OptionalArgument (List Api.Enum.ProjectState.ProjectState)
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of projects under the owner.

  - orderBy - Ordering options for projects returned from the connection
  - search - Query to search projects by, currently only searching by name.
  - states - A list of states to filter the projects by.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projects : (ProjectsOptionalArguments -> ProjectsOptionalArguments) -> SelectionSet decodesTo Api.Object.ProjectConnection -> SelectionSet decodesTo Api.Object.Repository
projects fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { orderBy = Absent, search = Absent, states = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeProjectOrder, Argument.optional "search" filledInOptionals.search Encode.string, Argument.optional "states" filledInOptionals.states (Encode.enum Api.Enum.ProjectState.toString |> Encode.list), Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "projects" optionalArgs object_ identity


{-| The HTTP path listing the repository's projects
-}
projectsResourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Repository
projectsResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "projectsResourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL listing the repository's projects
-}
projectsUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Repository
projectsUrl =
    Object.selectionForField "ScalarCodecs.Uri" "projectsUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias PullRequestRequiredArguments =
    { number : Int }


{-| Returns a single pull request from the current repository by number.

  - number - The number for the pull request to be returned.

-}
pullRequest : PullRequestRequiredArguments -> SelectionSet decodesTo Api.Object.PullRequest -> SelectionSet (Maybe decodesTo) Api.Object.Repository
pullRequest requiredArgs object_ =
    Object.selectionForCompositeField "pullRequest" [ Argument.required "number" requiredArgs.number Encode.int ] object_ (identity >> Decode.nullable)


type alias PullRequestsOptionalArguments =
    { states : OptionalArgument (List Api.Enum.PullRequestState.PullRequestState)
    , labels : OptionalArgument (List String)
    , headRefName : OptionalArgument String
    , baseRefName : OptionalArgument String
    , orderBy : OptionalArgument Api.InputObject.IssueOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of pull requests that have been opened in the repository.

  - states - A list of states to filter the pull requests by.
  - labels - A list of label names to filter the pull requests by.
  - headRefName - The head ref name to filter the pull requests by.
  - baseRefName - The base ref name to filter the pull requests by.
  - orderBy - Ordering options for pull requests returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
pullRequests : (PullRequestsOptionalArguments -> PullRequestsOptionalArguments) -> SelectionSet decodesTo Api.Object.PullRequestConnection -> SelectionSet decodesTo Api.Object.Repository
pullRequests fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { states = Absent, labels = Absent, headRefName = Absent, baseRefName = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "states" filledInOptionals.states (Encode.enum Api.Enum.PullRequestState.toString |> Encode.list), Argument.optional "labels" filledInOptionals.labels (Encode.string |> Encode.list), Argument.optional "headRefName" filledInOptionals.headRefName Encode.string, Argument.optional "baseRefName" filledInOptionals.baseRefName Encode.string, Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeIssueOrder, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "pullRequests" optionalArgs object_ identity


{-| Identifies when the repository was last pushed to.
-}
pushedAt : SelectionSet (Maybe Api.ScalarCodecs.DateTime) Api.Object.Repository
pushedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "pushedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| Whether or not rebase-merging is enabled on this repository.
-}
rebaseMergeAllowed : SelectionSet Bool Api.Object.Repository
rebaseMergeAllowed =
    Object.selectionForField "Bool" "rebaseMergeAllowed" [] Decode.bool


type alias RefRequiredArguments =
    { qualifiedName : String }


{-| Fetch a given ref from the repository

  - qualifiedName - The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`).

-}
ref : RefRequiredArguments -> SelectionSet decodesTo Api.Object.Ref -> SelectionSet (Maybe decodesTo) Api.Object.Repository
ref requiredArgs object_ =
    Object.selectionForCompositeField "ref" [ Argument.required "qualifiedName" requiredArgs.qualifiedName Encode.string ] object_ (identity >> Decode.nullable)


type alias RefsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , direction : OptionalArgument Api.Enum.OrderDirection.OrderDirection
    , orderBy : OptionalArgument Api.InputObject.RefOrder
    }


type alias RefsRequiredArguments =
    { refPrefix : String }


{-| Fetch a list of refs from the repository

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - refPrefix - A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
  - direction - DEPRECATED: use orderBy. The ordering direction.
  - orderBy - Ordering options for refs returned from the connection.

-}
refs : (RefsOptionalArguments -> RefsOptionalArguments) -> RefsRequiredArguments -> SelectionSet decodesTo Api.Object.RefConnection -> SelectionSet (Maybe decodesTo) Api.Object.Repository
refs fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, direction = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "direction" filledInOptionals.direction (Encode.enum Api.Enum.OrderDirection.toString), Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeRefOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "refs" (optionalArgs ++ [ Argument.required "refPrefix" requiredArgs.refPrefix Encode.string ]) object_ (identity >> Decode.nullable)


type alias RegistryPackagesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , name : OptionalArgument String
    , names : OptionalArgument (List (Maybe String))
    , repositoryId : OptionalArgument Api.ScalarCodecs.Id
    , packageType : OptionalArgument Api.Enum.RegistryPackageType.RegistryPackageType
    , registryPackageType : OptionalArgument String
    , publicOnly : OptionalArgument Bool
    }


{-| A list of registry packages under the owner.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - name - Find registry package by name.
  - names - Find registry packages by their names.
  - repositoryId - Find registry packages in a repository.
  - packageType - Filter registry package by type.
  - registryPackageType - Filter registry package by type (string).
  - publicOnly - Filter registry package by whether it is publicly visible

-}
registryPackages : (RegistryPackagesOptionalArguments -> RegistryPackagesOptionalArguments) -> SelectionSet decodesTo Api.Object.RegistryPackageConnection -> SelectionSet decodesTo Api.Object.Repository
registryPackages fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, name = Absent, names = Absent, repositoryId = Absent, packageType = Absent, registryPackageType = Absent, publicOnly = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "names" filledInOptionals.names (Encode.string |> Encode.maybe |> Encode.list), Argument.optional "repositoryId" filledInOptionals.repositoryId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "packageType" filledInOptionals.packageType (Encode.enum Api.Enum.RegistryPackageType.toString), Argument.optional "registryPackageType" filledInOptionals.registryPackageType Encode.string, Argument.optional "publicOnly" filledInOptionals.publicOnly Encode.bool ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "registryPackages" optionalArgs object_ identity


type alias RegistryPackagesForQueryOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , query : OptionalArgument String
    , packageType : OptionalArgument Api.Enum.RegistryPackageType.RegistryPackageType
    }


{-| A list of registry packages for a particular search query.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - query - Find registry package by search query.
  - packageType - Filter registry package by type.

-}
registryPackagesForQuery : (RegistryPackagesForQueryOptionalArguments -> RegistryPackagesForQueryOptionalArguments) -> SelectionSet decodesTo Api.Object.RegistryPackageConnection -> SelectionSet decodesTo Api.Object.Repository
registryPackagesForQuery fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, query = Absent, packageType = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "query" filledInOptionals.query Encode.string, Argument.optional "packageType" filledInOptionals.packageType (Encode.enum Api.Enum.RegistryPackageType.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "registryPackagesForQuery" optionalArgs object_ identity


type alias ReleaseRequiredArguments =
    { tagName : String }


{-| Lookup a single release given various criteria.

  - tagName - The name of the Tag the Release was created from

-}
release : ReleaseRequiredArguments -> SelectionSet decodesTo Api.Object.Release -> SelectionSet (Maybe decodesTo) Api.Object.Repository
release requiredArgs object_ =
    Object.selectionForCompositeField "release" [ Argument.required "tagName" requiredArgs.tagName Encode.string ] object_ (identity >> Decode.nullable)


type alias ReleasesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.ReleaseOrder
    }


{-| List of releases which are dependent on this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Order for connection

-}
releases : (ReleasesOptionalArguments -> ReleasesOptionalArguments) -> SelectionSet decodesTo Api.Object.ReleaseConnection -> SelectionSet decodesTo Api.Object.Repository
releases fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeReleaseOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "releases" optionalArgs object_ identity


type alias RepositoryTopicsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of applied repository-topic associations for this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
repositoryTopics : (RepositoryTopicsOptionalArguments -> RepositoryTopicsOptionalArguments) -> SelectionSet decodesTo Api.Object.RepositoryTopicConnection -> SelectionSet decodesTo Api.Object.Repository
repositoryTopics fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "repositoryTopics" optionalArgs object_ identity


{-| The HTTP path for this repository
-}
resourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Repository
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias ShortDescriptionHTMLOptionalArguments =
    { limit : OptionalArgument Int }


{-| A description of the repository, rendered to HTML without any links in it.

  - limit - How many characters to return.

-}
shortDescriptionHTML : (ShortDescriptionHTMLOptionalArguments -> ShortDescriptionHTMLOptionalArguments) -> SelectionSet Api.ScalarCodecs.Html Api.Object.Repository
shortDescriptionHTML fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { limit = Absent }

        optionalArgs =
            [ Argument.optional "limit" filledInOptionals.limit Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForField "ScalarCodecs.Html" "shortDescriptionHTML" optionalArgs (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| Whether or not squash-merging is enabled on this repository.
-}
squashMergeAllowed : SelectionSet Bool Api.Object.Repository
squashMergeAllowed =
    Object.selectionForField "Bool" "squashMergeAllowed" [] Decode.bool


{-| The SSH URL to clone this repository
-}
sshUrl : SelectionSet Api.ScalarCodecs.GitSSHRemote Api.Object.Repository
sshUrl =
    Object.selectionForField "ScalarCodecs.GitSSHRemote" "sshUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecGitSSHRemote |> .decoder)


type alias StargazersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.StarOrder
    }


{-| A list of users who have starred this starrable.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Order for connection

-}
stargazers : (StargazersOptionalArguments -> StargazersOptionalArguments) -> SelectionSet decodesTo Api.Object.StargazerConnection -> SelectionSet decodesTo Api.Object.Repository
stargazers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeStarOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "stargazers" optionalArgs object_ identity


{-| Temporary authentication token for cloning this repository.
-}
tempCloneToken : SelectionSet (Maybe String) Api.Object.Repository
tempCloneToken =
    Object.selectionForField "(Maybe String)" "tempCloneToken" [] (Decode.string |> Decode.nullable)


{-| The repository from which this repository was generated, if any.
-}
templateRepository : SelectionSet decodesTo Api.Object.Repository -> SelectionSet (Maybe decodesTo) Api.Object.Repository
templateRepository object_ =
    Object.selectionForCompositeField "templateRepository" [] object_ (identity >> Decode.nullable)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Repository
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this repository
-}
url : SelectionSet Api.ScalarCodecs.Uri Api.Object.Repository
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
-}
usesCustomOpenGraphImage : SelectionSet Bool Api.Object.Repository
usesCustomOpenGraphImage =
    Object.selectionForField "Bool" "usesCustomOpenGraphImage" [] Decode.bool


{-| Indicates whether the viewer has admin permissions on this repository.
-}
viewerCanAdminister : SelectionSet Bool Api.Object.Repository
viewerCanAdminister =
    Object.selectionForField "Bool" "viewerCanAdminister" [] Decode.bool


{-| Can the current viewer create new projects on this owner.
-}
viewerCanCreateProjects : SelectionSet Bool Api.Object.Repository
viewerCanCreateProjects =
    Object.selectionForField "Bool" "viewerCanCreateProjects" [] Decode.bool


{-| Check if the viewer is able to change their subscription status for the repository.
-}
viewerCanSubscribe : SelectionSet Bool Api.Object.Repository
viewerCanSubscribe =
    Object.selectionForField "Bool" "viewerCanSubscribe" [] Decode.bool


{-| Indicates whether the viewer can update the topics of this repository.
-}
viewerCanUpdateTopics : SelectionSet Bool Api.Object.Repository
viewerCanUpdateTopics =
    Object.selectionForField "Bool" "viewerCanUpdateTopics" [] Decode.bool


{-| Returns a boolean indicating whether the viewing user has starred this starrable.
-}
viewerHasStarred : SelectionSet Bool Api.Object.Repository
viewerHasStarred =
    Object.selectionForField "Bool" "viewerHasStarred" [] Decode.bool


{-| The users permission level on the repository. Will return null if authenticated as an GitHub App.
-}
viewerPermission : SelectionSet (Maybe Api.Enum.RepositoryPermission.RepositoryPermission) Api.Object.Repository
viewerPermission =
    Object.selectionForField "(Maybe Enum.RepositoryPermission.RepositoryPermission)" "viewerPermission" [] (Api.Enum.RepositoryPermission.decoder |> Decode.nullable)


{-| Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-}
viewerSubscription : SelectionSet (Maybe Api.Enum.SubscriptionState.SubscriptionState) Api.Object.Repository
viewerSubscription =
    Object.selectionForField "(Maybe Enum.SubscriptionState.SubscriptionState)" "viewerSubscription" [] (Api.Enum.SubscriptionState.decoder |> Decode.nullable)


type alias VulnerabilityAlertsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of vulnerability alerts that are on this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
vulnerabilityAlerts : (VulnerabilityAlertsOptionalArguments -> VulnerabilityAlertsOptionalArguments) -> SelectionSet decodesTo Api.Object.RepositoryVulnerabilityAlertConnection -> SelectionSet (Maybe decodesTo) Api.Object.Repository
vulnerabilityAlerts fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "vulnerabilityAlerts" optionalArgs object_ (identity >> Decode.nullable)


type alias WatchersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users watching the repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
watchers : (WatchersOptionalArguments -> WatchersOptionalArguments) -> SelectionSet decodesTo Api.Object.UserConnection -> SelectionSet decodesTo Api.Object.Repository
watchers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "watchers" optionalArgs object_ identity
