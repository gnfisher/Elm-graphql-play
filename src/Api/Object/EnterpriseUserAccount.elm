-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.EnterpriseUserAccount exposing (AvatarUrlOptionalArguments, OrganizationsOptionalArguments, avatarUrl, createdAt, enterprise, id, login, name, organizations, resourcePath, updatedAt, url, user)

import Api.Enum.EnterpriseUserAccountMembershipRole
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias AvatarUrlOptionalArguments =
    { size : OptionalArgument Int }


{-| A URL pointing to the enterprise user account's public avatar.

  - size - The size of the resulting square image.

-}
avatarUrl : (AvatarUrlOptionalArguments -> AvatarUrlOptionalArguments) -> SelectionSet Api.ScalarCodecs.Uri Api.Object.EnterpriseUserAccount
avatarUrl fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { size = Absent }

        optionalArgs =
            [ Argument.optional "size" filledInOptionals.size Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForField "ScalarCodecs.Uri" "avatarUrl" optionalArgs (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.EnterpriseUserAccount
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The enterprise in which this user account exists.
-}
enterprise : SelectionSet decodesTo Api.Object.Enterprise -> SelectionSet decodesTo Api.Object.EnterpriseUserAccount
enterprise object_ =
    Object.selectionForCompositeField "enterprise" [] object_ identity


id : SelectionSet Api.ScalarCodecs.Id Api.Object.EnterpriseUserAccount
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| An identifier for the enterprise user account, a login or email address
-}
login : SelectionSet String Api.Object.EnterpriseUserAccount
login =
    Object.selectionForField "String" "login" [] Decode.string


{-| The name of the enterprise user account
-}
name : SelectionSet (Maybe String) Api.Object.EnterpriseUserAccount
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


type alias OrganizationsOptionalArguments =
    { query : OptionalArgument String
    , orderBy : OptionalArgument Api.InputObject.OrganizationOrder
    , role : OptionalArgument Api.Enum.EnterpriseUserAccountMembershipRole.EnterpriseUserAccountMembershipRole
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of enterprise organizations this user is a member of.

  - query - The search string to look for.
  - orderBy - Ordering options for organizations returned from the connection.
  - role - The role of the user in the enterprise organization.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
organizations : (OrganizationsOptionalArguments -> OrganizationsOptionalArguments) -> SelectionSet decodesTo Api.Object.EnterpriseOrganizationMembershipConnection -> SelectionSet decodesTo Api.Object.EnterpriseUserAccount
organizations fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { query = Absent, orderBy = Absent, role = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "query" filledInOptionals.query Encode.string, Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeOrganizationOrder, Argument.optional "role" filledInOptionals.role (Encode.enum Api.Enum.EnterpriseUserAccountMembershipRole.toString), Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "organizations" optionalArgs object_ identity


{-| The HTTP path for this user.
-}
resourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.EnterpriseUserAccount
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.EnterpriseUserAccount
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this user.
-}
url : SelectionSet Api.ScalarCodecs.Uri Api.Object.EnterpriseUserAccount
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The user within the enterprise.
-}
user : SelectionSet decodesTo Api.Object.User -> SelectionSet (Maybe decodesTo) Api.Object.EnterpriseUserAccount
user object_ =
    Object.selectionForCompositeField "user" [] object_ (identity >> Decode.nullable)
