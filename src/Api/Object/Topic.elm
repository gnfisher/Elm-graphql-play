-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Topic exposing (RelatedTopicsOptionalArguments, StargazersOptionalArguments, id, name, relatedTopics, stargazers, viewerHasStarred)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


id : SelectionSet Api.ScalarCodecs.Id Api.Object.Topic
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The topic's name.
-}
name : SelectionSet String Api.Object.Topic
name =
    Object.selectionForField "String" "name" [] Decode.string


type alias RelatedTopicsOptionalArguments =
    { first : OptionalArgument Int }


{-| A list of related topics, including aliases of this topic, sorted with the most relevant
first. Returns up to 10 Topics.

  - first - How many topics to return.

-}
relatedTopics : (RelatedTopicsOptionalArguments -> RelatedTopicsOptionalArguments) -> SelectionSet decodesTo Api.Object.Topic -> SelectionSet (List decodesTo) Api.Object.Topic
relatedTopics fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "relatedTopics" optionalArgs object_ (identity >> Decode.list)


type alias StargazersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.StarOrder
    }


{-| A list of users who have starred this starrable.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Order for connection

-}
stargazers : (StargazersOptionalArguments -> StargazersOptionalArguments) -> SelectionSet decodesTo Api.Object.StargazerConnection -> SelectionSet decodesTo Api.Object.Topic
stargazers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Api.InputObject.encodeStarOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "stargazers" optionalArgs object_ identity


{-| Returns a boolean indicating whether the viewing user has starred this starrable.
-}
viewerHasStarred : SelectionSet Bool Api.Object.Topic
viewerHasStarred =
    Object.selectionForField "Bool" "viewerHasStarred" [] Decode.bool
